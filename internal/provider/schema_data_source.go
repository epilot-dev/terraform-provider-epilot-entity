// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-entity/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-entity/internal/sdk/pkg/models/operations"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SchemaDataSource{}
var _ datasource.DataSourceWithConfigure = &SchemaDataSource{}

func NewSchemaDataSource() datasource.DataSource {
	return &SchemaDataSource{}
}

// SchemaDataSource is the data source implementation.
type SchemaDataSource struct {
	client *sdk.SDK
}

// SchemaDataSourceModel describes the data model.
type SchemaDataSourceModel struct {
	Attributes             []Attribute               `tfsdk:"attributes"`
	Blueprint              types.String              `tfsdk:"blueprint"`
	Capabilities           []EntityCapability        `tfsdk:"capabilities"`
	Comment                types.String              `tfsdk:"comment"`
	CreatedAt              types.String              `tfsdk:"created_at"`
	DialogConfig           map[string]types.String   `tfsdk:"dialog_config"`
	Draft                  types.Bool                `tfsdk:"draft"`
	EnableSetting          []types.String            `tfsdk:"enable_setting"`
	ExplicitSearchMappings map[string]SearchMappings `tfsdk:"explicit_search_mappings"`
	FeatureFlag            types.String              `tfsdk:"feature_flag"`
	GroupSettings          []GroupSettings           `tfsdk:"group_settings"`
	Icon                   types.String              `tfsdk:"icon"`
	ID                     types.String              `tfsdk:"id"`
	LayoutSettings         *LayoutSettings           `tfsdk:"layout_settings"`
	Name                   types.String              `tfsdk:"name"`
	Plural                 types.String              `tfsdk:"plural"`
	Published              types.Bool                `tfsdk:"published"`
	Slug                   types.String              `tfsdk:"slug"`
	Source                 *Source                   `tfsdk:"source"`
	TitleTemplate          types.String              `tfsdk:"title_template"`
	UIConfig               *UIConfig                 `tfsdk:"ui_config"`
	UpdatedAt              types.String              `tfsdk:"updated_at"`
	Version                types.Int64               `tfsdk:"version"`
}

// Metadata returns the data source type name.
func (r *SchemaDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schema"
}

// Schema defines the schema for the data source.
func (r *SchemaDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Schema DataSource",

		Attributes: map[string]schema.Attribute{
			"attributes": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"text_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"multiline": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["string"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Textarea or text input`,
						},
						"link_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["link"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Link with title and href`,
						},
						"date_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["date", "datetime"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Date or Datetime picker`,
						},
						"country_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["country"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Country picker`,
						},
						"boolean_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["boolean"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Yes / No Toggle`,
						},
						"select_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"allow_any": schema.BoolAttribute{
									Computed:    true,
									Description: `Allow arbitrary input values in addition to provided options`,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"options": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"option": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"title": schema.StringAttribute{
														Computed: true,
													},
													"value": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"str": schema.StringAttribute{
												Computed: true,
											},
										},
									},
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["select", "radio"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Dropdown select`,
						},
						"multi_select_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"allow_any": schema.BoolAttribute{
									Computed:    true,
									Description: `Allow arbitrary input values in addition to provided options`,
								},
								"allow_extra_options": schema.BoolAttribute{
									Computed:    true,
									Description: `controls if the 360 ui will allow the user to enter a value which is not defined by the options`,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"disable_case_sensitive": schema.BoolAttribute{
									Computed:    true,
									Description: `controls if the matching of values against the options is case sensitive or not`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"options": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"str": schema.StringAttribute{
												Computed: true,
											},
											"multi_select_attribute_2": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"title": schema.StringAttribute{
														Computed: true,
													},
													"value": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["multiselect", "checkbox"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Multi Choice Selection`,
						},
						"status_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"options": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"str": schema.StringAttribute{
												Computed: true,
											},
											"status_attribute_2": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"title": schema.StringAttribute{
														Computed: true,
													},
													"value": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["status"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Status select`,
						},
						"sequence_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"prefix": schema.StringAttribute{
									Computed:    true,
									Description: `Prefix added before the sequence number`,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"start_number": schema.Int64Attribute{
									Computed: true,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["sequence"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Sequence of unique identifiers`,
						},
						"relation_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"actions": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"action_type": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `must be one of ["add_existing", "create_new", "create_from_existing"]` + "\n" +
													`The action type. Currently supported actions:` + "\n" +
													`` + "\n" +
													`| action | description |` + "\n" +
													`|--------|-------------|` + "\n" +
													`| add_existing | Enables the user to pick an existing entity to link as relation |` + "\n" +
													`| create_new | Enables the user to create a new entity using the first/main ` + "`" + `allowed_schemas` + "`" + ` schema` + "\n" +
													`| create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |` + "\n" +
													``,
											},
											"default": schema.BoolAttribute{
												Computed:    true,
												Description: `Sets the action as the default action, visible as the main action button.`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `Name of the feature flag that enables this action`,
											},
											"label": schema.StringAttribute{
												Computed:    true,
												Description: `The action label or action translation key (i18n)`,
											},
											"new_entity_item": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"org": schema.StringAttribute{
														Computed:    true,
														Description: `Organization Id the entity belongs to`,
													},
													"schema": schema.StringAttribute{
														Computed:    true,
														Description: `URL-friendly identifier for the entity schema`,
													},
													"tags": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
													},
													"title": schema.StringAttribute{
														Computed:    true,
														Description: `Title of entity`,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
													},
													"entity": schema.StringAttribute{
														Computed:    true,
														Description: `Parsed as JSON.`,
													},
												},
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `Name of the setting flag that enables this action`,
											},
										},
									},
								},
								"add_button_label": schema.StringAttribute{
									Computed:    true,
									Description: `Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is.`,
								},
								"allowed_schemas": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"details_view_mode_enabled": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Enables the preview, edition, and creation of relation items on a Master-Details view mode.`,
								},
								"drawer_size": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["small", "medium", "large"]`,
								},
								"edit_mode": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["list-view"]`,
								},
								"enable_relation_picker": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.`,
								},
								"enable_relation_tags": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item.`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"has_primary": schema.BoolAttribute{
									Computed: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"relation_affinity_mode": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `must be one of ["weak", "strong"]` + "\n" +
										`Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.`,
								},
								"relation_type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["has_many", "has_one"]`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"reverse_attributes": schema.MapAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `Map of schema slug to target relation attribute`,
								},
								"search_placeholder": schema.StringAttribute{
									Computed:    true,
									Description: `Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is.`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"summary_fields": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"str": schema.StringAttribute{
												Computed: true,
											},
											"summary_field": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"display_as": schema.StringAttribute{
														Computed:    true,
														Description: `An hint on how to display the summary field`,
													},
													"field": schema.StringAttribute{
														Computed:    true,
														Description: `The field from the entity attributes to display`,
													},
												},
												Description: `Summary Fields are displayed inside list view as a resume of the relation entity.`,
											},
										},
									},
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["relation"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Entity Relationship`,
						},
						"user_relation_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"multiple": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["relation_user"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `User Relationship`,
						},
						"address_relation_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"has_primary": schema.BoolAttribute{
									Computed: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["relation_address"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Reference to an address attribute of another entity`,
						},
						"payment_method_relation_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"has_primary": schema.BoolAttribute{
									Computed: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["relation_payment_method"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Reference to a payment method attribute of another entity`,
						},
						"currency_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"currency": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"one": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"code": schema.StringAttribute{
														Computed: true,
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"flag": schema.StringAttribute{
														Computed: true,
													},
													"symbol": schema.StringAttribute{
														Computed: true,
													},
												},
												Description: `A currency configuration`,
											},
										},
									},
									Description: `An array of currency configurations with a country code (ISO-4217)`,
								},
								"currency_selector_only": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["currency"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Currency input`,
						},
						"repeatable_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"enable_relation_picker": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`when enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"has_primary": schema.BoolAttribute{
									Computed: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"relation_affinity_mode": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `must be one of ["weak", "strong"]` + "\n" +
										`Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity.`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"repeatable": schema.BoolAttribute{
									Computed: true,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["string", "phone", "email", "address", "relation", "payment", "price_component", "date"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Repeatable (add N number of fields)`,
						},
						"tags_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"options": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"suggestions": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["tags"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Tags`,
						},
						"number_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"format": schema.StringAttribute{
									Computed: true,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["number"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Numeric input`,
						},
						"consent_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"identifiers": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"topic": schema.StringAttribute{
									Computed: true,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["consent"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Consent Management`,
						},
						"internal_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["internal"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `No UI representation`,
						},
						"ordered_list_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["ordered_list"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Type of attribute to render N number of ordered fields`,
						},
						"file_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"allowed_extensions": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `List of file extensions (without the dot suffix)`,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_access_control": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["public-read", "private"]`,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"display_images_landscaped": schema.BoolAttribute{
									Computed:    true,
									Description: `Controls how the images are presented to the user during upload on the Entity Details view.`,
								},
								"enable_description": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `When set to true, an i18n description will be used alongside the attribute label.` + "\n" +
										`This description should be set through the platform locales in the form: ` + "`" + `file.{attribute_name}.description_text` + "`" + `.` + "\n" +
										``,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"multiple": schema.BoolAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["image", "file"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `File or Image Attachment`,
						},
						"computed_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["computed"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `An attribute that is computed from the entity data. For more details on how to use them, check the docs [here](https://e-pilot.atlassian.net/wiki/spaces/EO/pages/5642977476/How+To+Computed+Schema+Attributes)`,
						},
						"partner_status_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["partner_status"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Partner Status`,
						},
						"invitation_email_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["invitation_email"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Email address for send invitation`,
						},
						"automation_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["automation"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Automation entity`,
						},
						"internal_user_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["internal_user"]`,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Epilot internal user info`,
						},
						"purpose_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.SingleNestedAttribute{
									Computed:   true,
									Attributes: map[string]schema.Attribute{},
									MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
										`These constraints should and will be enforced by the attribute renderer.` + "\n" +
										``,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"default_value": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
								},
								"feature_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the feature flag is enabled`,
								},
								"group": schema.StringAttribute{
									Computed:    true,
									Description: `Which group the attribute should appear in. Accepts group ID or group name`,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: false` + "\n" +
										`Do not render attribute in entity views`,
								},
								"hide_label": schema.BoolAttribute{
									Computed:    true,
									Description: `When set to true, will hide the label of the field.`,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
										`The value must be a valid @epilot/base-elements Icon name` + "\n" +
										``,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"label": schema.StringAttribute{
									Computed: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"order": schema.Int64Attribute{
									Computed:    true,
									Description: `Attribute sort order (ascending) in group`,
								},
								"parents": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									MarkdownDescription: `Default: true` + "\n" +
										`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
								},
								"readonly": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
										`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
										`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
										``,
								},
								"required": schema.BoolAttribute{
									Computed:    true,
									Description: `Default: false`,
								},
								"setting_flag": schema.StringAttribute{
									Computed:    true,
									Description: `This attribute should only be active when the setting is enabled`,
								},
								"show_in_table": schema.BoolAttribute{
									Computed:    true,
									Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
								},
								"type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["purpose"]`,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
								},
							},
							Description: `Entity Taxonomy`,
						},
					},
				},
				Description: `An ordered list of attributes the entity contains`,
			},
			"blueprint": schema.StringAttribute{
				Computed:    true,
				Description: `Reference to blueprint`,
			},
			"capabilities": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"purpose": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"attributes": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"text_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"multiline": schema.BoolAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["string"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Textarea or text input`,
									},
									"link_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["link"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Link with title and href`,
									},
									"date_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["date", "datetime"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Date or Datetime picker`,
									},
									"country_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["country"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Country picker`,
									},
									"boolean_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["boolean"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Yes / No Toggle`,
									},
									"select_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"allow_any": schema.BoolAttribute{
												Computed:    true,
												Description: `Allow arbitrary input values in addition to provided options`,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"options": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"option": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"title": schema.StringAttribute{
																	Computed: true,
																},
																"value": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"str": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["select", "radio"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Dropdown select`,
									},
									"multi_select_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"allow_any": schema.BoolAttribute{
												Computed:    true,
												Description: `Allow arbitrary input values in addition to provided options`,
											},
											"allow_extra_options": schema.BoolAttribute{
												Computed:    true,
												Description: `controls if the 360 ui will allow the user to enter a value which is not defined by the options`,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"disable_case_sensitive": schema.BoolAttribute{
												Computed:    true,
												Description: `controls if the matching of values against the options is case sensitive or not`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"options": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"str": schema.StringAttribute{
															Computed: true,
														},
														"multi_select_attribute_2": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"title": schema.StringAttribute{
																	Computed: true,
																},
																"value": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
													},
												},
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["multiselect", "checkbox"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Multi Choice Selection`,
									},
									"status_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"options": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"str": schema.StringAttribute{
															Computed: true,
														},
														"status_attribute_2": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"title": schema.StringAttribute{
																	Computed: true,
																},
																"value": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
													},
												},
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["status"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Status select`,
									},
									"sequence_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"prefix": schema.StringAttribute{
												Computed:    true,
												Description: `Prefix added before the sequence number`,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"start_number": schema.Int64Attribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["sequence"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Sequence of unique identifiers`,
									},
									"relation_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"actions": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"action_type": schema.StringAttribute{
															Computed: true,
															MarkdownDescription: `must be one of ["add_existing", "create_new", "create_from_existing"]` + "\n" +
																`The action type. Currently supported actions:` + "\n" +
																`` + "\n" +
																`| action | description |` + "\n" +
																`|--------|-------------|` + "\n" +
																`| add_existing | Enables the user to pick an existing entity to link as relation |` + "\n" +
																`| create_new | Enables the user to create a new entity using the first/main ` + "`" + `allowed_schemas` + "`" + ` schema` + "\n" +
																`| create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |` + "\n" +
																``,
														},
														"default": schema.BoolAttribute{
															Computed:    true,
															Description: `Sets the action as the default action, visible as the main action button.`,
														},
														"feature_flag": schema.StringAttribute{
															Computed:    true,
															Description: `Name of the feature flag that enables this action`,
														},
														"label": schema.StringAttribute{
															Computed:    true,
															Description: `The action label or action translation key (i18n)`,
														},
														"new_entity_item": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"org": schema.StringAttribute{
																	Computed:    true,
																	Description: `Organization Id the entity belongs to`,
																},
																"schema": schema.StringAttribute{
																	Computed:    true,
																	Description: `URL-friendly identifier for the entity schema`,
																},
																"tags": schema.ListAttribute{
																	Computed:    true,
																	ElementType: types.StringType,
																},
																"title": schema.StringAttribute{
																	Computed:    true,
																	Description: `Title of entity`,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																},
																"entity": schema.StringAttribute{
																	Computed:    true,
																	Description: `Parsed as JSON.`,
																},
															},
														},
														"setting_flag": schema.StringAttribute{
															Computed:    true,
															Description: `Name of the setting flag that enables this action`,
														},
													},
												},
											},
											"add_button_label": schema.StringAttribute{
												Computed:    true,
												Description: `Optional label for the add button. The translated value for add_button_lable is used, if found else the string is used as is.`,
											},
											"allowed_schemas": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"details_view_mode_enabled": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Enables the preview, edition, and creation of relation items on a Master-Details view mode.`,
											},
											"drawer_size": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["small", "medium", "large"]`,
											},
											"edit_mode": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["list-view"]`,
											},
											"enable_relation_picker": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`When enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.`,
											},
											"enable_relation_tags": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`When enable_relation_tags is set to true the user will be able to set tags(labels) in each relation item.`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"has_primary": schema.BoolAttribute{
												Computed: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"relation_affinity_mode": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `must be one of ["weak", "strong"]` + "\n" +
													`Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.`,
											},
											"relation_type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["has_many", "has_one"]`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"reverse_attributes": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `Map of schema slug to target relation attribute`,
											},
											"search_placeholder": schema.StringAttribute{
												Computed:    true,
												Description: `Optional placeholder text for the relation search input. The translated value for search_placeholder is used, if found else the string is used as is.`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"summary_fields": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"str": schema.StringAttribute{
															Computed: true,
														},
														"summary_field": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"display_as": schema.StringAttribute{
																	Computed:    true,
																	Description: `An hint on how to display the summary field`,
																},
																"field": schema.StringAttribute{
																	Computed:    true,
																	Description: `The field from the entity attributes to display`,
																},
															},
															Description: `Summary Fields are displayed inside list view as a resume of the relation entity.`,
														},
													},
												},
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["relation"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Entity Relationship`,
									},
									"user_relation_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"multiple": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["relation_user"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `User Relationship`,
									},
									"address_relation_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"has_primary": schema.BoolAttribute{
												Computed: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["relation_address"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Reference to an address attribute of another entity`,
									},
									"payment_method_relation_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"has_primary": schema.BoolAttribute{
												Computed: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["relation_payment_method"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Reference to a payment method attribute of another entity`,
									},
									"currency_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"currency": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"one": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"code": schema.StringAttribute{
																	Computed: true,
																},
																"description": schema.StringAttribute{
																	Computed: true,
																},
																"flag": schema.StringAttribute{
																	Computed: true,
																},
																"symbol": schema.StringAttribute{
																	Computed: true,
																},
															},
															Description: `A currency configuration`,
														},
													},
												},
												Description: `An array of currency configurations with a country code (ISO-4217)`,
											},
											"currency_selector_only": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["currency"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Currency input`,
									},
									"repeatable_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"enable_relation_picker": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`when enable_relation_picker is set to true the user will be able to pick existing relations as values. Otherwise, the user will need to create new relation to link.`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"has_primary": schema.BoolAttribute{
												Computed: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"relation_affinity_mode": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `must be one of ["weak", "strong"]` + "\n" +
													`Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity.`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"repeatable": schema.BoolAttribute{
												Computed: true,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["string", "phone", "email", "address", "relation", "payment", "price_component", "date"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Repeatable (add N number of fields)`,
									},
									"tags_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"options": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"suggestions": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["tags"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Tags`,
									},
									"number_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"format": schema.StringAttribute{
												Computed: true,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["number"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Numeric input`,
									},
									"consent_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"identifiers": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"topic": schema.StringAttribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["consent"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Consent Management`,
									},
									"internal_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["internal"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `No UI representation`,
									},
									"ordered_list_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["ordered_list"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Type of attribute to render N number of ordered fields`,
									},
									"file_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"allowed_extensions": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `List of file extensions (without the dot suffix)`,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_access_control": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["public-read", "private"]`,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"display_images_landscaped": schema.BoolAttribute{
												Computed:    true,
												Description: `Controls how the images are presented to the user during upload on the Entity Details view.`,
											},
											"enable_description": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `When set to true, an i18n description will be used alongside the attribute label.` + "\n" +
													`This description should be set through the platform locales in the form: ` + "`" + `file.{attribute_name}.description_text` + "`" + `.` + "\n" +
													``,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"multiple": schema.BoolAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["image", "file"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `File or Image Attachment`,
									},
									"computed_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["computed"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `An attribute that is computed from the entity data. For more details on how to use them, check the docs [here](https://e-pilot.atlassian.net/wiki/spaces/EO/pages/5642977476/How+To+Computed+Schema+Attributes)`,
									},
									"partner_status_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["partner_status"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Partner Status`,
									},
									"invitation_email_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["invitation_email"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Email address for send invitation`,
									},
									"automation_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["automation"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Automation entity`,
									},
									"internal_user_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["internal_user"]`,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Epilot internal user info`,
									},
									"purpose_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.SingleNestedAttribute{
												Computed:   true,
												Attributes: map[string]schema.Attribute{},
												MarkdownDescription: `A set of constraints applicable to the attribute.` + "\n" +
													`These constraints should and will be enforced by the attribute renderer.` + "\n" +
													``,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"default_value": schema.StringAttribute{
												Computed:    true,
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` disables editing the attribute on the entity builder UI`,
											},
											"feature_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the feature flag is enabled`,
											},
											"group": schema.StringAttribute{
												Computed:    true,
												Description: `Which group the attribute should appear in. Accepts group ID or group name`,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: false` + "\n" +
													`Do not render attribute in entity views`,
											},
											"hide_label": schema.BoolAttribute{
												Computed:    true,
												Description: `When set to true, will hide the label of the field.`,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Code name of the icon to used to represent this attribute.` + "\n" +
													`The value must be a valid @epilot/base-elements Icon name` + "\n" +
													``,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"order": schema.Int64Attribute{
												Computed:    true,
												Description: `Attribute sort order (ascending) in group`,
											},
											"parents": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `Default: true` + "\n" +
													`Setting to ` + "`" + `true` + "`" + ` prevents the attribute from being modified / deleted`,
											},
											"readonly": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
													`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
													`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
													``,
											},
											"required": schema.BoolAttribute{
												Computed:    true,
												Description: `Default: false`,
											},
											"setting_flag": schema.StringAttribute{
												Computed:    true,
												Description: `This attribute should only be active when the setting is enabled`,
											},
											"show_in_table": schema.BoolAttribute{
												Computed:    true,
												Description: `Render as a column in table views. When defined, overrides ` + "`" + `hidden` + "`" + ``,
											},
											"type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["purpose"]`,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Entity Taxonomy`,
									},
								},
							},
						},
						"feature_flag": schema.StringAttribute{
							Computed:    true,
							Description: `This capability should only be active when the feature flag is enabled`,
						},
						"legacy": schema.BoolAttribute{
							Computed:    true,
							Description: `Only show capability for legacy tenants (ivy)`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `Unique name for the capability`,
						},
						"setting_flag": schema.StringAttribute{
							Computed:    true,
							Description: `This capability should only be active when the setting is enabled`,
						},
						"title": schema.StringAttribute{
							Computed:    true,
							Description: `Human readable title of the capability`,
						},
						"ui_hooks": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"component": schema.StringAttribute{
										Computed:    true,
										Description: `the component to be dynamically loaded`,
									},
									"disabled": schema.BoolAttribute{
										Computed:    true,
										Description: `Whether capability should be disabled`,
									},
									"group_expanded": schema.BoolAttribute{
										Computed:    true,
										Description: `Sets the group expand/collapse default state`,
									},
									"header": schema.BoolAttribute{
										Computed:    true,
										Description: `Specific to Activity pilot`,
									},
									"hook": schema.StringAttribute{
										Computed:    true,
										Description: `name of the hook to use`,
									},
									"icon": schema.StringAttribute{
										Computed:    true,
										Description: `Preview icon name(As in Base elements) for the capability`,
									},
									"import": schema.StringAttribute{
										Computed:    true,
										Description: `package to be imported`,
									},
									"order": schema.Int64Attribute{
										Computed:    true,
										Description: `render order (ascending)`,
									},
									"render_condition": schema.StringAttribute{
										Computed: true,
									},
									"required_permission": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"action": schema.StringAttribute{
												Computed: true,
											},
											"resource": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Require a permission to display UI hook`,
									},
									"route": schema.StringAttribute{
										Computed:    true,
										Description: `route for specified capability`,
									},
									"title": schema.StringAttribute{
										Computed: true,
									},
								},
							},
						},
					},
				},
			},
			"comment": schema.StringAttribute{
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"dialog_config": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"draft": schema.BoolAttribute{
				Computed: true,
			},
			"enable_setting": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `This schema should only be active when one of the organization settings is enabled`,
			},
			"explicit_search_mappings": schema.MapNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"fields": schema.MapAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"index": schema.BoolAttribute{
							Computed:    true,
							Description: `Default: true`,
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["keyword", "text", "boolean", "integer", "long", "float", "date", "flattened", "nested"]`,
						},
					},
				},
				MarkdownDescription: `Advanced: explicit Elasticsearch index mapping definitions for entity data` + "\n" +
					``,
			},
			"feature_flag": schema.StringAttribute{
				Computed:    true,
				Description: `This schema should only be active when the feature flag is enabled`,
			},
			"group_settings": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"purpose": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
						},
						"expanded": schema.BoolAttribute{
							Computed: true,
						},
						"feature_flag": schema.StringAttribute{
							Computed:    true,
							Description: `This group should only be active when the feature flag is enabled`,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"info_tooltip_title": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"default": schema.StringAttribute{
									Computed: true,
								},
								"key": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"label": schema.StringAttribute{
							Computed: true,
						},
						"order": schema.Int64Attribute{
							Computed: true,
							MarkdownDescription: `Default: 0` + "\n" +
								`Render order of the group`,
						},
						"render_condition": schema.StringAttribute{
							Computed: true,
						},
						"setting_flag": schema.StringAttribute{
							Computed:    true,
							Description: `This group should only be active when the setting is enabled`,
						},
					},
				},
				Description: `A dictionary of Group Titles and associated settings if present.`,
			},
			"icon": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"layout_settings": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"additional_properties": schema.StringAttribute{
						Computed:    true,
						Description: `Parsed as JSON.`,
					},
					"grid_gap": schema.StringAttribute{
						Computed:    true,
						Description: `Defines the grid gap for the mounting node of the attribute.`,
					},
					"grid_template_columns": schema.StringAttribute{
						Computed:    true,
						Description: `Defines the grid column template for the mounting node of the attribute.`,
					},
				},
				MarkdownDescription: `Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:` + "\n" +
					`- Managed Properties: are interpreted and transformed into layout styles` + "\n" +
					`- Un-managed Properties: are appended as styles into the attribute mounting node` + "\n" +
					``,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Description: `User-friendly identifier for the entity schema`,
			},
			"plural": schema.StringAttribute{
				Computed: true,
			},
			"published": schema.BoolAttribute{
				Computed: true,
			},
			"slug": schema.StringAttribute{
				Required: true,
			},
			"source": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"title_template": schema.StringAttribute{
				Computed:    true,
				Description: `Template for rendering the title field. Uses handlebars`,
			},
			"ui_config": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"create_view": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_create": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"table_menu_options": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"icon": schema.StringAttribute{
												Computed: true,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["default"]`,
									},
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["redirect"]`,
									},
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["disabled"]`,
									},
								},
							},
						},
					},
					"edit_view": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_edit": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"table_menu_options": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"icon": schema.StringAttribute{
												Computed: true,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["default"]`,
									},
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["redirect"]`,
									},
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["disabled"]`,
									},
								},
							},
						},
					},
					"list_item": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"summary_attributes": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"summary_attribute": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"feature_flag": schema.StringAttribute{
													Computed:    true,
													Description: `Binds summary field visibility to the feature flag state.`,
												},
												"label": schema.StringAttribute{
													Computed:    true,
													Description: `Label to be shown on the top of the value.`,
												},
												"render_condition": schema.StringAttribute{
													Computed: true,
													MarkdownDescription: `Defines the conditional rendering expression for showing this field.` + "\n" +
														`When a valid expression is parsed, their evaluation defines the visibility of this attribute.` + "\n" +
														`Note: Empty or invalid expression have no effect on the field visibility.` + "\n" +
														``,
												},
												"setting_flag": schema.StringAttribute{
													Computed:    true,
													Description: `Binds summary field visibility to the setting flag state.`,
												},
												"show_as_tag": schema.BoolAttribute{
													Computed:    true,
													Description: `Displays the value within a tag chip.`,
												},
												"tag_color": schema.StringAttribute{
													Computed:    true,
													Description: `CSS hex color or CSS color name for the tag chip.`,
												},
												"value": schema.StringAttribute{
													Computed:    true,
													Description: `A static value or an handlebar expression.`,
												},
											},
											MarkdownDescription: `Represents an expanded version of an attribute to be displayed in the list item summary.` + "\n" +
												`This configuration can be used in the following way:` + "\n" +
												`` + "```" + `js` + "\n" +
												`{` + "\n" +
												`  "label": "Price components"` + "\n" +
												`  "value": "{{` + "`{{item.prices.length}}`" + `}} price components"` + "\n" +
												`  "show_as_tag": true` + "\n" +
												`  "render_condition": "is_composite_price = "true""` + "\n" +
												`}` + "\n" +
												`` + "```" + `` + "\n" +
												`The value field supports handlebar expressions from which you can pick any field from the entity state.` + "\n" +
												``,
										},
										"str": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
					},
					"sharing": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"show_sharing_button": schema.BoolAttribute{
								Computed:    true,
								Description: `Show the sharing button in entity detail view`,
							},
						},
					},
					"single_view": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_edit": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"table_menu_options": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"icon": schema.StringAttribute{
												Computed: true,
											},
											"label": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["default"]`,
									},
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["redirect"]`,
									},
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["disabled"]`,
									},
								},
							},
						},
					},
					"table_view": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_table": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"classic_view": schema.StringAttribute{
										Computed: true,
									},
									"dropdown_items": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"entity_default_table_1": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"entity": schema.StringAttribute{
															Computed:    true,
															Description: `URL-friendly identifier for the entity schema`,
														},
														"feature_flag": schema.StringAttribute{
															Computed:    true,
															Description: `This dropdown item should only be active when the feature flag is enabled`,
														},
														"legacy": schema.BoolAttribute{
															Computed:    true,
															Description: `Only show item for legacy tenants (ivy)`,
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["entity"]`,
														},
													},
												},
												"two": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"feature_flag": schema.StringAttribute{
															Computed:    true,
															Description: `This dropdown item should only be active when the feature flag is enabled`,
														},
														"legacy": schema.BoolAttribute{
															Computed:    true,
															Description: `Only show item for legacy tenants (ivy)`,
														},
														"title": schema.StringAttribute{
															Computed: true,
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["link"]`,
														},
														"uri": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
										},
									},
									"enable_thumbnails": schema.BoolAttribute{
										Computed: true,
										MarkdownDescription: `Default: false` + "\n" +
											`Enable the thumbnail column`,
									},
									"navbar_actions": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"options": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"label": schema.StringAttribute{
																Computed: true,
															},
															"params": schema.SingleNestedAttribute{
																Computed:   true,
																Attributes: map[string]schema.Attribute{},
															},
														},
													},
												},
												"type": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"row_actions": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["default"]`,
									},
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
									},
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["redirect"]`,
									},
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed:    true,
										Description: `must be one of ["disabled"]`,
									},
								},
							},
						},
					},
				},
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"version": schema.Int64Attribute{
				Computed: true,
			},
		},
	}
}

func (r *SchemaDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SchemaDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SchemaDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := new(string)
	if !data.ID.IsUnknown() && !data.ID.IsNull() {
		*id = data.ID.ValueString()
	} else {
		id = nil
	}
	slug := data.Slug.ValueString()
	request := operations.GetSchemaRequest{
		ID:   id,
		Slug: slug,
	}
	res, err := r.client.Schemas.GetSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.EntitySchemaItem == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.EntitySchemaItem)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
