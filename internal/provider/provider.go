// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"epilot-entity/internal/sdk"
	"epilot-entity/internal/sdk/pkg/models/shared"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

var _ provider.Provider = &EpilotEntityProvider{}

type EpilotEntityProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// EpilotEntityProviderModel describes the provider data model.
type EpilotEntityProviderModel struct {
	ServerURL  types.String `tfsdk:"server_url"`
	EpilotAuth types.String `tfsdk:"epilot_auth"`
	EpilotOrg  types.String `tfsdk:"epilot_org"`
}

func (p *EpilotEntityProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "epilot-entity"
	resp.Version = p.version
}

func (p *EpilotEntityProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: `Entity API: Flexible data layer for epilot Entities.` + "\n" +
			`` + "\n" +
			`Use this API configure and access your business objects like Contacts, Opportunities and Products.` + "\n" +
			`` + "\n" +
			`[Feature Documentation](https://docs.epilot.io/docs/entities/flexible-entities)` + "\n" +
			``,
		Attributes: map[string]schema.Attribute{
			"server_url": schema.StringAttribute{
				MarkdownDescription: "Server URL (defaults to https://entity.sls.epilot.io)",
				Optional:            true,
				Required:            false,
			},
			"epilot_auth": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"epilot_org": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
		},
	}
}

func (p *EpilotEntityProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data EpilotEntityProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()

	if ServerURL == "" {
		ServerURL = "https://entity.sls.epilot.io"
	}

	epilotAuth := new(string)
	if !data.EpilotAuth.IsUnknown() && !data.EpilotAuth.IsNull() {
		*epilotAuth = data.EpilotAuth.ValueString()
	} else {
		epilotAuth = nil
	}
	epilotOrg := new(string)
	if !data.EpilotOrg.IsUnknown() && !data.EpilotOrg.IsNull() {
		*epilotOrg = data.EpilotOrg.ValueString()
	} else {
		epilotOrg = nil
	}
	security := shared.Security{
		EpilotAuth: epilotAuth,
		EpilotOrg:  epilotOrg,
	}

	opts := []sdk.SDKOption{
		sdk.WithServerURL(ServerURL),
		sdk.WithSecurity(security),
	}
	client := sdk.New(opts...)

	resp.DataSourceData = client
	resp.ResourceData = client
}

func (p *EpilotEntityProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewEntityResource,
		NewSchemaResource,
	}
}

func (p *EpilotEntityProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewEntityDataSource,
		NewSchemaDataSource,
	}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &EpilotEntityProvider{
			version: version,
		}
	}
}
