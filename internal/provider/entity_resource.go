// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"epilot-entity/internal/sdk"
	"epilot-entity/internal/sdk/pkg/models/operations"
	"epilot-entity/internal/sdk/pkg/models/shared"
	"fmt"
	"time"

	"epilot-entity/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &EntityResource{}
var _ resource.ResourceWithImportState = &EntityResource{}

func NewEntityResource() resource.Resource {
	return &EntityResource{}
}

// EntityResource defines the resource implementation.
type EntityResource struct {
	client *sdk.SDK
}

// EntityResourceModel describes the resource data model.
type EntityResourceModel struct {
	CreatedAt types.String   `tfsdk:"created_at"`
	ID        types.String   `tfsdk:"id"`
	Org       types.String   `tfsdk:"org"`
	Schema    types.String   `tfsdk:"schema"`
	Tags      []types.String `tfsdk:"tags"`
	Title     types.String   `tfsdk:"title"`
	UpdatedAt types.String   `tfsdk:"updated_at"`
	Slug      types.String   `tfsdk:"slug"`
	Entity    types.String   `tfsdk:"entity"`
}

func (r *EntityResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_entity"
}

func (r *EntityResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Entity Resource",

		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"org": schema.StringAttribute{
				Computed: true,
			},
			"schema": schema.StringAttribute{
				Computed: true,
			},
			"tags": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"title": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"slug": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required:    true,
				Description: `Entity Schema`,
			},
			"entity": schema.StringAttribute{
				Computed: true,
				Optional: true,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
				Description: `Parsed as JSON.`,
			},
		},
	}
}

func (r *EntityResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *EntityResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *EntityResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var entity *shared.Entity
	createdAt := new(time.Time)
	if !data.CreatedAt.IsUnknown() && !data.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, data.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	id := new(string)
	if !data.ID.IsUnknown() && !data.ID.IsNull() {
		*id = data.ID.ValueString()
	} else {
		id = nil
	}
	org := new(string)
	if !data.Org.IsUnknown() && !data.Org.IsNull() {
		*org = data.Org.ValueString()
	} else {
		org = nil
	}
	schema := new(string)
	if !data.Schema.IsUnknown() && !data.Schema.IsNull() {
		*schema = data.Schema.ValueString()
	} else {
		schema = nil
	}
	tags := make([]string, 0)
	for _, tagsItem := range data.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	title := new(string)
	if !data.Title.IsUnknown() && !data.Title.IsNull() {
		*title = data.Title.ValueString()
	} else {
		title = nil
	}
	updatedAt := new(time.Time)
	if !data.UpdatedAt.IsUnknown() && !data.UpdatedAt.IsNull() {
		*updatedAt, _ = time.Parse(time.RFC3339Nano, data.UpdatedAt.ValueString())
	} else {
		updatedAt = nil
	}
	var entity1 interface{}
	if !data.Entity.IsUnknown() && !data.Entity.IsNull() {
		_ = json.Unmarshal([]byte(data.Entity.ValueString()), &entity1)
	}
	entity = &shared.Entity{
		CreatedAt: createdAt,
		ID:        id,
		Org:       org,
		Schema:    schema,
		Tags:      tags,
		Title:     title,
		UpdatedAt: updatedAt,
		Entity:    entity1,
	}
	slug := data.Slug.ValueString()
	request := operations.CreateEntityRequest{
		Entity: entity,
		Slug:   slug,
	}
	res, err := r.client.Entities.CreateEntity(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.EntityItem == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromCreateResponse(res.EntityItem)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EntityResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *EntityResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	slug := data.Slug.ValueString()
	request := operations.GetEntityRequest{
		ID:   id,
		Slug: slug,
	}
	res, err := r.client.Entities.GetEntity(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.GetEntity200ApplicationJSONObject.Entity == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.GetEntity200ApplicationJSONObject.Entity)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EntityResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *EntityResourceModel
	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var entity *shared.Entity
	createdAt := new(time.Time)
	if !data.CreatedAt.IsUnknown() && !data.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, data.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	id := new(string)
	if !data.ID.IsUnknown() && !data.ID.IsNull() {
		*id = data.ID.ValueString()
	} else {
		id = nil
	}
	org := new(string)
	if !data.Org.IsUnknown() && !data.Org.IsNull() {
		*org = data.Org.ValueString()
	} else {
		org = nil
	}
	schema := new(string)
	if !data.Schema.IsUnknown() && !data.Schema.IsNull() {
		*schema = data.Schema.ValueString()
	} else {
		schema = nil
	}
	tags := make([]string, 0)
	for _, tagsItem := range data.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	title := new(string)
	if !data.Title.IsUnknown() && !data.Title.IsNull() {
		*title = data.Title.ValueString()
	} else {
		title = nil
	}
	updatedAt := new(time.Time)
	if !data.UpdatedAt.IsUnknown() && !data.UpdatedAt.IsNull() {
		*updatedAt, _ = time.Parse(time.RFC3339Nano, data.UpdatedAt.ValueString())
	} else {
		updatedAt = nil
	}
	var entity1 interface{}
	if !data.Entity.IsUnknown() && !data.Entity.IsNull() {
		_ = json.Unmarshal([]byte(data.Entity.ValueString()), &entity1)
	}
	entity = &shared.Entity{
		CreatedAt: createdAt,
		ID:        id,
		Org:       org,
		Schema:    schema,
		Tags:      tags,
		Title:     title,
		UpdatedAt: updatedAt,
		Entity:    entity1,
	}
	id1 := data.ID.ValueString()
	slug := data.Slug.ValueString()
	request := operations.UpdateEntityRequest{
		Entity: entity,
		ID:     id1,
		Slug:   slug,
	}
	res, err := r.client.Entities.UpdateEntity(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.EntityItem == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromUpdateResponse(res.EntityItem)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *EntityResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *EntityResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := data.ID.ValueString()
	slug := data.Slug.ValueString()
	request := operations.DeleteEntityRequest{
		ID:   id,
		Slug: slug,
	}
	res, err := r.client.Entities.DeleteEntity(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *EntityResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
