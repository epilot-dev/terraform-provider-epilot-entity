// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-entity/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *EntityResourceModel) ToSharedEntity() *shared.Entity {
	createdAt := new(time.Time)
	if !r.CreatedAt.IsUnknown() && !r.CreatedAt.IsNull() {
		*createdAt, _ = time.Parse(time.RFC3339Nano, r.CreatedAt.ValueString())
	} else {
		createdAt = nil
	}
	id := new(string)
	if !r.ID.IsUnknown() && !r.ID.IsNull() {
		*id = r.ID.ValueString()
	} else {
		id = nil
	}
	org := new(string)
	if !r.Org.IsUnknown() && !r.Org.IsNull() {
		*org = r.Org.ValueString()
	} else {
		org = nil
	}
	schema := new(string)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = r.Schema.ValueString()
	} else {
		schema = nil
	}
	var tags []string = nil
	for _, tagsItem := range r.Tags {
		tags = append(tags, tagsItem.ValueString())
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	updatedAt := new(time.Time)
	if !r.UpdatedAt.IsUnknown() && !r.UpdatedAt.IsNull() {
		*updatedAt, _ = time.Parse(time.RFC3339Nano, r.UpdatedAt.ValueString())
	} else {
		updatedAt = nil
	}
	var entity interface{}
	if !r.Entity.IsUnknown() && !r.Entity.IsNull() {
		_ = json.Unmarshal([]byte(r.Entity.ValueString()), &entity)
	}
	out := shared.Entity{
		CreatedAt: createdAt,
		ID:        id,
		Org:       org,
		Schema:    schema,
		Tags:      tags,
		Title:     title,
		UpdatedAt: updatedAt,
		Entity:    entity,
	}
	return &out
}

func (r *EntityResourceModel) RefreshFromSharedEntityItem(resp *shared.EntityItem) {
	if resp.CreatedAt != nil {
		r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
	} else {
		r.CreatedAt = types.StringNull()
	}
	if resp.Entity == nil {
		r.Entity = types.StringNull()
	} else {
		entityResult, _ := json.Marshal(resp.Entity)
		r.Entity = types.StringValue(string(entityResult))
	}
	r.ID = types.StringValue(resp.ID)
	r.Org = types.StringValue(resp.Org)
	r.Schema = types.StringValue(resp.Schema)
	r.Tags = nil
	for _, v := range resp.Tags {
		r.Tags = append(r.Tags, types.StringValue(v))
	}
	r.Title = types.StringPointerValue(resp.Title)
	if resp.UpdatedAt != nil {
		r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
	} else {
		r.UpdatedAt = types.StringNull()
	}
}
