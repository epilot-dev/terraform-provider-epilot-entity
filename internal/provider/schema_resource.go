// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"epilot-entity/internal/sdk"
	"epilot-entity/internal/sdk/pkg/models/operations"
	"fmt"

	"epilot-entity/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SchemaResource{}
var _ resource.ResourceWithImportState = &SchemaResource{}

func NewSchemaResource() resource.Resource {
	return &SchemaResource{}
}

// SchemaResource defines the resource implementation.
type SchemaResource struct {
	client *sdk.SDK
}

// SchemaResourceModel describes the resource data model.
type SchemaResourceModel struct {
	Attributes             []Attribute                 `tfsdk:"attributes"`
	Blueprint              types.String                `tfsdk:"blueprint"`
	Capabilities           []EntityCapability          `tfsdk:"capabilities"`
	Comment                types.String                `tfsdk:"comment"`
	CreatedAt              types.String                `tfsdk:"created_at"`
	DialogConfig           map[string]types.String     `tfsdk:"dialog_config"`
	Draft                  types.Bool                  `tfsdk:"draft"`
	EnableSetting          []types.String              `tfsdk:"enable_setting"`
	ExplicitSearchMappings map[string]SearchMappings   `tfsdk:"explicit_search_mappings"`
	FeatureFlag            types.String                `tfsdk:"feature_flag"`
	GroupSettings          []EntitySchemaGroupSettings `tfsdk:"group_settings"`
	Icon                   types.String                `tfsdk:"icon"`
	ID                     types.String                `tfsdk:"id"`
	LayoutSettings         *EntitySchemaLayoutSettings `tfsdk:"layout_settings"`
	Name                   types.String                `tfsdk:"name"`
	Plural                 types.String                `tfsdk:"plural"`
	Published              types.Bool                  `tfsdk:"published"`
	Slug                   types.String                `tfsdk:"slug"`
	Source                 *EntitySchemaItemSource     `tfsdk:"source"`
	TitleTemplate          types.String                `tfsdk:"title_template"`
	UIConfig               *EntitySchemaUIConfig       `tfsdk:"ui_config"`
	UpdatedAt              types.String                `tfsdk:"updated_at"`
	Version                types.Int64                 `tfsdk:"version"`
}

func (r *SchemaResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schema"
}

func (r *SchemaResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Schema Resource",

		Attributes: map[string]schema.Attribute{
			"attributes": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"text_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"multiline": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"string",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Textarea or text input`,
						},
						"link_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"link",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Link with title and href`,
						},
						"date_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"date",
											"datetime",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Date or Datetime picker`,
						},
						"country_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"country",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Country picker`,
						},
						"boolean_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"boolean",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Yes / No Toggle`,
						},
						"select_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"allow_any": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"options": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"select_attribute_options_option": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												Attributes: map[string]schema.Attribute{
													"title": schema.StringAttribute{
														Computed: true,
														Optional: true,
													},
													"value": schema.StringAttribute{
														Required: true,
													},
												},
											},
											"str": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Validators: []validator.Object{
											validators.ExactlyOneChild(),
										},
									},
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"select",
											"radio",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Dropdown select`,
						},
						"multi_select_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"allow_any": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"allow_extra_options": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"disable_case_sensitive": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"options": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"str": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"multi_select_attribute_options_2": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												Attributes: map[string]schema.Attribute{
													"title": schema.StringAttribute{
														Computed: true,
														Optional: true,
													},
													"value": schema.StringAttribute{
														Required: true,
													},
												},
											},
										},
										Validators: []validator.Object{
											validators.ExactlyOneChild(),
										},
									},
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"multiselect",
											"checkbox",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Multi Choice Selection`,
						},
						"status_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"options": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"str": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"status_attribute_options_2": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												Attributes: map[string]schema.Attribute{
													"title": schema.StringAttribute{
														Computed: true,
														Optional: true,
													},
													"value": schema.StringAttribute{
														Required: true,
													},
												},
											},
										},
										Validators: []validator.Object{
											validators.ExactlyOneChild(),
										},
									},
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"status",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Status select`,
						},
						"sequence_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"prefix": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"start_number": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"sequence",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Sequence of unique identifiers`,
						},
						"relation_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"actions": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"action_type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"add_existing",
														"create_new",
														"create_from_existing",
													),
												},
												MarkdownDescription: `The action type. Currently supported actions:` + "\n" +
													`` + "\n" +
													`| action | description |` + "\n" +
													`|--------|-------------|` + "\n" +
													`| add_existing | Enables the user to pick an existing entity to link as relation |` + "\n" +
													`| create_new | Enables the user to create a new entity using the first/main ` + "`" + `allowed_schemas` + "`" + ` schema` + "\n" +
													`| create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |` + "\n" +
													``,
											},
											"default": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"new_entity_item": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.StringAttribute{
														Required: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"id": schema.StringAttribute{
														Required: true,
													},
													"org": schema.StringAttribute{
														Required: true,
													},
													"schema": schema.StringAttribute{
														Required: true,
													},
													"tags": schema.ListAttribute{
														Computed:    true,
														Optional:    true,
														ElementType: types.StringType,
													},
													"title": schema.StringAttribute{
														Required: true,
													},
													"updated_at": schema.StringAttribute{
														Required: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"additional_properties": schema.MapAttribute{
														Required:    true,
														ElementType: types.StringType,
														Validators: []validator.Map{
															mapvalidator.ValueStringsAre(validators.IsValidJSON()),
														},
													},
												},
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
									},
								},
								"add_button_label": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"allowed_schemas": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"details_view_mode_enabled": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"drawer_size": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"small",
											"medium",
											"large",
										),
									},
								},
								"edit_mode": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"list-view",
										),
									},
								},
								"enable_relation_picker": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"enable_relation_tags": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"has_primary": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"relation_affinity_mode": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"weak",
											"strong",
										),
									},
									Description: `Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.`,
								},
								"relation_type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"has_many",
											"has_one",
										),
									},
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"reverse_attributes": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"search_placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"summary_fields": schema.ListNestedAttribute{
									Computed: true,
									Optional: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"str": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"summary_field": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												Attributes: map[string]schema.Attribute{
													"display_as": schema.StringAttribute{
														Computed: true,
														Optional: true,
													},
													"field": schema.StringAttribute{
														Computed: true,
														Optional: true,
													},
												},
												Description: `Summary Fields are displayed inside list view as a resume of the relation entity.`,
											},
										},
										Validators: []validator.Object{
											validators.ExactlyOneChild(),
										},
									},
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"relation",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Entity Relationship`,
						},
						"user_relation_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"multiple": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"relation_user",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `User Relationship`,
						},
						"address_relation_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"has_primary": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"relation_address",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Reference to an address attribute of another entity`,
						},
						"payment_method_relation_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"has_primary": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"relation_payment_method",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Reference to a payment method attribute of another entity`,
						},
						"currency_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"currency": schema.ListNestedAttribute{
									Required: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"currency_attribute_currency_1": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												Attributes: map[string]schema.Attribute{
													"code": schema.StringAttribute{
														Required: true,
													},
													"description": schema.StringAttribute{
														Required: true,
													},
													"flag": schema.StringAttribute{
														Computed: true,
														Optional: true,
													},
													"symbol": schema.StringAttribute{
														Required: true,
													},
												},
												Description: `A currency configuration`,
											},
										},
										Validators: []validator.Object{
											validators.ExactlyOneChild(),
										},
									},
								},
								"currency_selector_only": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"currency",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Currency input`,
						},
						"repeatable_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"enable_relation_picker": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"has_primary": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"relation_affinity_mode": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"weak",
											"strong",
										),
									},
									Description: `Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity.`,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"repeatable": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"string",
											"phone",
											"email",
											"address",
											"relation",
											"payment",
											"price_component",
											"date",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Repeatable (add N number of fields)`,
						},
						"tags_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"options": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"suggestions": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"tags",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Tags`,
						},
						"number_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"format": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"number",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Numeric input`,
						},
						"consent_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"identifiers": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"topic": schema.StringAttribute{
									Required: true,
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"consent",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Consent Management`,
						},
						"internal_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"internal",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `No UI representation`,
						},
						"ordered_list_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"ordered_list",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Type of attribute to render N number of ordered fields`,
						},
						"file_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"allowed_extensions": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_access_control": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"public-read",
											"private",
										),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"display_images_landscaped": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"enable_description": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"multiple": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Required: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"image",
											"file",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `File or Image Attachment`,
						},
						"computed_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"computed",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `An attribute that is computed from the entity data. For more details on how to use them, check the docs [here](https://e-pilot.atlassian.net/wiki/spaces/EO/pages/5642977476/How+To+Computed+Schema+Attributes)`,
						},
						"partner_status_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"partner_status",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Partner Status`,
						},
						"invitation_email_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"invitation_email",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Email address for send invitation`,
						},
						"automation_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"automation",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Automation entity`,
						},
						"internal_user_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"internal_user",
										),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Epilot internal user info`,
						},
						"purpose_attribute": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"purpose": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"constraints": schema.MapAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
									Validators: []validator.Map{
										mapvalidator.ValueStringsAre(validators.IsValidJSON()),
									},
								},
								"created_at": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"default_value": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
									Description: `Parsed as JSON.`,
								},
								"deprecated": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"entity_builder_disable_edit": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"feature_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"group": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"hidden": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"hide_label": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"icon": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"label": schema.StringAttribute{
									Required: true,
								},
								"layout": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"name": schema.StringAttribute{
									Required: true,
								},
								"order": schema.Int64Attribute{
									Computed: true,
									Optional: true,
								},
								"parents": schema.ListAttribute{
									Computed:    true,
									Optional:    true,
									ElementType: types.StringType,
								},
								"placeholder": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"preview_value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"protected": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"readonly": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"render_condition": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"required": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"setting_flag": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"show_in_table": schema.BoolAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"purpose",
										),
									},
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Optional: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"value_formatter": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
							Description: `Entity Taxonomy`,
						},
					},
					Validators: []validator.Object{
						validators.ExactlyOneChild(),
					},
				},
			},
			"blueprint": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"capabilities": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"purpose": schema.ListAttribute{
							Computed:    true,
							Optional:    true,
							ElementType: types.StringType,
						},
						"attributes": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"text_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"multiline": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"string",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Textarea or text input`,
									},
									"link_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"link",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Link with title and href`,
									},
									"date_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"date",
														"datetime",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Date or Datetime picker`,
									},
									"country_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"country",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Country picker`,
									},
									"boolean_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"boolean",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Yes / No Toggle`,
									},
									"select_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"allow_any": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"options": schema.ListNestedAttribute{
												Computed: true,
												Optional: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"select_attribute_options_option": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"title": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"value": schema.StringAttribute{
																	Required: true,
																},
															},
														},
														"str": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
													},
													Validators: []validator.Object{
														validators.ExactlyOneChild(),
													},
												},
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"select",
														"radio",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Dropdown select`,
									},
									"multi_select_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"allow_any": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"allow_extra_options": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"disable_case_sensitive": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"options": schema.ListNestedAttribute{
												Computed: true,
												Optional: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"str": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"multi_select_attribute_options_2": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"title": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"value": schema.StringAttribute{
																	Required: true,
																},
															},
														},
													},
													Validators: []validator.Object{
														validators.ExactlyOneChild(),
													},
												},
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"multiselect",
														"checkbox",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Multi Choice Selection`,
									},
									"status_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"options": schema.ListNestedAttribute{
												Computed: true,
												Optional: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"str": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"status_attribute_options_2": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"title": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"value": schema.StringAttribute{
																	Required: true,
																},
															},
														},
													},
													Validators: []validator.Object{
														validators.ExactlyOneChild(),
													},
												},
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"status",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Status select`,
									},
									"sequence_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"prefix": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"start_number": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"sequence",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Sequence of unique identifiers`,
									},
									"relation_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"actions": schema.ListNestedAttribute{
												Computed: true,
												Optional: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"action_type": schema.StringAttribute{
															Computed: true,
															Optional: true,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"add_existing",
																	"create_new",
																	"create_from_existing",
																),
															},
															MarkdownDescription: `The action type. Currently supported actions:` + "\n" +
																`` + "\n" +
																`| action | description |` + "\n" +
																`|--------|-------------|` + "\n" +
																`| add_existing | Enables the user to pick an existing entity to link as relation |` + "\n" +
																`| create_new | Enables the user to create a new entity using the first/main ` + "`" + `allowed_schemas` + "`" + ` schema` + "\n" +
																`| create_from_existing | Enables the user to pick an existing entity to clone from, while creating a blank new entity to link as relation |` + "\n" +
																``,
														},
														"default": schema.BoolAttribute{
															Computed: true,
															Optional: true,
														},
														"feature_flag": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"label": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"new_entity_item": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Required: true,
																},
																"org": schema.StringAttribute{
																	Required: true,
																},
																"schema": schema.StringAttribute{
																	Required: true,
																},
																"tags": schema.ListAttribute{
																	Computed:    true,
																	Optional:    true,
																	ElementType: types.StringType,
																},
																"title": schema.StringAttribute{
																	Required: true,
																},
																"updated_at": schema.StringAttribute{
																	Required: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"additional_properties": schema.MapAttribute{
																	Required:    true,
																	ElementType: types.StringType,
																	Validators: []validator.Map{
																		mapvalidator.ValueStringsAre(validators.IsValidJSON()),
																	},
																},
															},
														},
														"setting_flag": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
													},
												},
											},
											"add_button_label": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"allowed_schemas": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"details_view_mode_enabled": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"drawer_size": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"small",
														"medium",
														"large",
													),
												},
											},
											"edit_mode": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"list-view",
													),
												},
											},
											"enable_relation_picker": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"enable_relation_tags": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"has_primary": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"relation_affinity_mode": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"weak",
														"strong",
													),
												},
												Description: `Weak relation attributes are kept when duplicating an entity. Strong relation attributes are discarded when duplicating an entity.`,
											},
											"relation_type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"has_many",
														"has_one",
													),
												},
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"reverse_attributes": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"search_placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"summary_fields": schema.ListNestedAttribute{
												Computed: true,
												Optional: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"str": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"summary_field": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"display_as": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"field": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
															},
															Description: `Summary Fields are displayed inside list view as a resume of the relation entity.`,
														},
													},
													Validators: []validator.Object{
														validators.ExactlyOneChild(),
													},
												},
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"relation",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Entity Relationship`,
									},
									"user_relation_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"multiple": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"relation_user",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `User Relationship`,
									},
									"address_relation_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"has_primary": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"relation_address",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Reference to an address attribute of another entity`,
									},
									"payment_method_relation_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"has_primary": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"relation_payment_method",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Reference to a payment method attribute of another entity`,
									},
									"currency_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"currency": schema.ListNestedAttribute{
												Required: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"currency_attribute_currency_1": schema.SingleNestedAttribute{
															Computed: true,
															Optional: true,
															Attributes: map[string]schema.Attribute{
																"code": schema.StringAttribute{
																	Required: true,
																},
																"description": schema.StringAttribute{
																	Required: true,
																},
																"flag": schema.StringAttribute{
																	Computed: true,
																	Optional: true,
																},
																"symbol": schema.StringAttribute{
																	Required: true,
																},
															},
															Description: `A currency configuration`,
														},
													},
													Validators: []validator.Object{
														validators.ExactlyOneChild(),
													},
												},
											},
											"currency_selector_only": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Required: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"currency",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Currency input`,
									},
									"repeatable_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"enable_relation_picker": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"has_primary": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"relation_affinity_mode": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"weak",
														"strong",
													),
												},
												Description: `Weak repeatable attributes are kept when duplicating an entity. Strong repeatable attributes are discarded when duplicating an entity.`,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"repeatable": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"string",
														"phone",
														"email",
														"address",
														"relation",
														"payment",
														"price_component",
														"date",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Repeatable (add N number of fields)`,
									},
									"tags_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"options": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"suggestions": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"tags",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Tags`,
									},
									"number_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"format": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"number",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Numeric input`,
									},
									"consent_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"identifiers": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"topic": schema.StringAttribute{
												Required: true,
											},
											"type": schema.StringAttribute{
												Required: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"consent",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Consent Management`,
									},
									"internal_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"internal",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `No UI representation`,
									},
									"ordered_list_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"ordered_list",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Type of attribute to render N number of ordered fields`,
									},
									"file_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"allowed_extensions": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_access_control": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"public-read",
														"private",
													),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"display_images_landscaped": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"enable_description": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"multiple": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Required: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"image",
														"file",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `File or Image Attachment`,
									},
									"computed_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"computed",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `An attribute that is computed from the entity data. For more details on how to use them, check the docs [here](https://e-pilot.atlassian.net/wiki/spaces/EO/pages/5642977476/How+To+Computed+Schema+Attributes)`,
									},
									"partner_status_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"partner_status",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Partner Status`,
									},
									"invitation_email_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"invitation_email",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Email address for send invitation`,
									},
									"automation_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"automation",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Automation entity`,
									},
									"internal_user_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"internal_user",
													),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Epilot internal user info`,
									},
									"purpose_attribute": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"purpose": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"constraints": schema.MapAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
												Validators: []validator.Map{
													mapvalidator.ValueStringsAre(validators.IsValidJSON()),
												},
											},
											"created_at": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"default_value": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
												Description: `Parsed as JSON.`,
											},
											"deprecated": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"entity_builder_disable_edit": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"feature_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"group": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"hidden": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"hide_label": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Required: true,
											},
											"layout": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"name": schema.StringAttribute{
												Required: true,
											},
											"order": schema.Int64Attribute{
												Computed: true,
												Optional: true,
											},
											"parents": schema.ListAttribute{
												Computed:    true,
												Optional:    true,
												ElementType: types.StringType,
											},
											"placeholder": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"preview_value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"protected": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"readonly": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"render_condition": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"required": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"setting_flag": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"show_in_table": schema.BoolAttribute{
												Computed: true,
												Optional: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													stringvalidator.OneOf(
														"purpose",
													),
												},
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Optional: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"value_formatter": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Entity Taxonomy`,
									},
								},
								Validators: []validator.Object{
									validators.ExactlyOneChild(),
								},
							},
						},
						"feature_flag": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"legacy": schema.BoolAttribute{
							Computed: true,
							Optional: true,
						},
						"name": schema.StringAttribute{
							Required: true,
						},
						"setting_flag": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"title": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"ui_hooks": schema.ListNestedAttribute{
							Computed: true,
							Optional: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"component": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"disabled": schema.BoolAttribute{
										Computed: true,
										Optional: true,
									},
									"group_expanded": schema.BoolAttribute{
										Computed: true,
										Optional: true,
									},
									"header": schema.BoolAttribute{
										Computed: true,
										Optional: true,
									},
									"hook": schema.StringAttribute{
										Required: true,
									},
									"icon": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"import": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"order": schema.Int64Attribute{
										Computed: true,
										Optional: true,
									},
									"render_condition": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"required_permission": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"action": schema.StringAttribute{
												Required: true,
											},
											"resource": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
										Description: `Require a permission to display UI hook`,
									},
									"route": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"title": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
								},
							},
						},
					},
				},
			},
			"comment": schema.StringAttribute{
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"dialog_config": schema.MapAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"draft": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"enable_setting": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"explicit_search_mappings": schema.MapNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"fields": schema.MapAttribute{
							Computed:    true,
							Optional:    true,
							ElementType: types.StringType,
							Validators: []validator.Map{
								mapvalidator.ValueStringsAre(validators.IsValidJSON()),
							},
						},
						"index": schema.BoolAttribute{
							Computed: true,
							Optional: true,
						},
						"type": schema.StringAttribute{
							Computed: true,
							Optional: true,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"keyword",
									"text",
									"boolean",
									"integer",
									"long",
									"float",
									"date",
									"flattened",
									"nested",
								),
							},
						},
					},
				},
			},
			"feature_flag": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"group_settings": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"purpose": schema.ListAttribute{
							Computed:    true,
							Optional:    true,
							ElementType: types.StringType,
						},
						"expanded": schema.BoolAttribute{
							Computed: true,
							Optional: true,
						},
						"feature_flag": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"id": schema.StringAttribute{
							Required: true,
						},
						"info_tooltip_title": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"default": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"key": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
						},
						"label": schema.StringAttribute{
							Required: true,
						},
						"order": schema.Int64Attribute{
							Computed: true,
							Optional: true,
						},
						"render_condition": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
						"setting_flag": schema.StringAttribute{
							Computed: true,
							Optional: true,
						},
					},
				},
			},
			"icon": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"layout_settings": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"grid_gap": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"grid_template_columns": schema.StringAttribute{
						Computed: true,
						Optional: true,
					},
					"additional_properties": schema.MapAttribute{
						Required:    true,
						ElementType: types.StringType,
						Validators: []validator.Map{
							mapvalidator.ValueStringsAre(validators.IsValidJSON()),
						},
					},
				},
				MarkdownDescription: `Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:` + "\n" +
					`- Managed Properties: are interpreted and transformed into layout styles` + "\n" +
					`- Un-managed Properties: are appended as styles into the attribute mounting node` + "\n" +
					``,
			},
			"name": schema.StringAttribute{
				Required: true,
			},
			"plural": schema.StringAttribute{
				Required: true,
			},
			"published": schema.BoolAttribute{
				Computed: true,
				Optional: true,
			},
			"slug": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Required: true,
			},
			"source": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"type": schema.StringAttribute{
						Computed: true,
					},
				},
			},
			"title_template": schema.StringAttribute{
				Computed: true,
				Optional: true,
			},
			"ui_config": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"create_view": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_create": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
									},
									"table_menu_options": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"default",
											),
										},
									},
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"redirect",
											),
										},
									},
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"disabled",
											),
										},
									},
								},
							},
						},
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
					"edit_view": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_edit": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
									},
									"table_menu_options": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"default",
											),
										},
									},
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"redirect",
											),
										},
									},
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"disabled",
											),
										},
									},
								},
							},
						},
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
					"list_item": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"summary_attributes": schema.ListNestedAttribute{
								Computed: true,
								Optional: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"summary_attribute": schema.SingleNestedAttribute{
											Computed: true,
											Optional: true,
											Attributes: map[string]schema.Attribute{
												"feature_flag": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"label": schema.StringAttribute{
													Required: true,
												},
												"render_condition": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"setting_flag": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"show_as_tag": schema.BoolAttribute{
													Computed: true,
													Optional: true,
												},
												"tag_color": schema.StringAttribute{
													Computed: true,
													Optional: true,
												},
												"value": schema.StringAttribute{
													Required: true,
												},
											},
											MarkdownDescription: `Represents an expanded version of an attribute to be displayed in the list item summary.` + "\n" +
												`This configuration can be used in the following way:` + "\n" +
												`` + "```" + `js` + "\n" +
												`{` + "\n" +
												`  "label": "Price components"` + "\n" +
												`  "value": "{{` + "`{{item.prices.length}}`" + `}} price components"` + "\n" +
												`  "show_as_tag": true` + "\n" +
												`  "render_condition": "is_composite_price = "true""` + "\n" +
												`}` + "\n" +
												`` + "```" + `` + "\n" +
												`The value field supports handlebar expressions from which you can pick any field from the entity state.` + "\n" +
												``,
										},
										"str": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
									Validators: []validator.Object{
										validators.ExactlyOneChild(),
									},
								},
							},
						},
					},
					"sharing": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"show_sharing_button": schema.BoolAttribute{
								Computed: true,
								Optional: true,
							},
						},
					},
					"single_view": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_edit": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"search_params": schema.MapAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
									},
									"table_menu_options": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										Attributes: map[string]schema.Attribute{
											"icon": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
											"label": schema.StringAttribute{
												Computed: true,
												Optional: true,
											},
										},
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"default",
											),
										},
									},
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"redirect",
											),
										},
									},
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"disabled",
											),
										},
									},
								},
							},
						},
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
					"table_view": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"entity_default_table": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"classic_view": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"dropdown_items": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"entity_default_table_dropdown_items_1": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"entity": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"feature_flag": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"legacy": schema.BoolAttribute{
															Computed: true,
															Optional: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
															Optional: true,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"entity",
																),
															},
														},
													},
												},
												"entity_default_table_dropdown_items_2": schema.SingleNestedAttribute{
													Computed: true,
													Optional: true,
													Attributes: map[string]schema.Attribute{
														"feature_flag": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"legacy": schema.BoolAttribute{
															Computed: true,
															Optional: true,
														},
														"title": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
															Optional: true,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"link",
																),
															},
														},
														"uri": schema.StringAttribute{
															Computed: true,
															Optional: true,
														},
													},
												},
											},
											Validators: []validator.Object{
												validators.ExactlyOneChild(),
											},
										},
									},
									"enable_thumbnails": schema.BoolAttribute{
										Computed: true,
										Optional: true,
									},
									"navbar_actions": schema.ListNestedAttribute{
										Computed: true,
										Optional: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"options": schema.ListNestedAttribute{
													Computed: true,
													Optional: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"label": schema.StringAttribute{
																Required: true,
															},
															"params": schema.MapAttribute{
																Computed:    true,
																Optional:    true,
																ElementType: types.StringType,
																Validators: []validator.Map{
																	mapvalidator.ValueStringsAre(validators.IsValidJSON()),
																},
															},
														},
													},
												},
												"type": schema.StringAttribute{
													Required: true,
												},
											},
										},
									},
									"row_actions": schema.ListAttribute{
										Computed:    true,
										Optional:    true,
										ElementType: types.StringType,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"default",
											),
										},
									},
								},
							},
							"redirect_entity_view": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"route": schema.StringAttribute{
										Computed: true,
										Optional: true,
									},
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"redirect",
											),
										},
									},
								},
							},
							"entity_view_disabled": schema.SingleNestedAttribute{
								Computed: true,
								Optional: true,
								Attributes: map[string]schema.Attribute{
									"view_type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"disabled",
											),
										},
									},
								},
							},
						},
						Validators: []validator.Object{
							validators.ExactlyOneChild(),
						},
					},
				},
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"version": schema.Int64Attribute{
				Computed: true,
				Optional: true,
			},
		},
	}
}

func (r *SchemaResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SchemaResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SchemaResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	entitySchema := data.ToSDKType()
	draft := new(bool)
	if !data.Draft.IsUnknown() && !data.Draft.IsNull() {
		*draft = data.Draft.ValueBool()
	} else {
		draft = nil
	}
	slug := data.Slug.ValueString()
	request := operations.PutSchemaRequest{
		EntitySchema: entitySchema,
		Draft:        draft,
		Slug:         slug,
	}
	res, err := r.client.Schemas.PutSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.PutSchema200ApplicationJSONObject.Results == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSDKType(res.PutSchema200ApplicationJSONObject.Results)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SchemaResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	id := new(string)
	if !data.ID.IsUnknown() && !data.ID.IsNull() {
		*id = data.ID.ValueString()
	} else {
		id = nil
	}
	slug := data.Slug.ValueString()
	request := operations.GetSchemaRequest{
		ID:   id,
		Slug: slug,
	}
	res, err := r.client.Schemas.GetSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.EntitySchemaItem == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSDKType(res.EntitySchemaItem)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SchemaResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	entitySchema := data.ToSDKType()
	draft := new(bool)
	if !data.Draft.IsUnknown() && !data.Draft.IsNull() {
		*draft = data.Draft.ValueBool()
	} else {
		draft = nil
	}
	slug := data.Slug.ValueString()
	request := operations.PutSchemaRequest{
		EntitySchema: entitySchema,
		Draft:        draft,
		Slug:         slug,
	}
	res, err := r.client.Schemas.PutSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.PutSchema200ApplicationJSONObject.Results == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSDKType(res.PutSchema200ApplicationJSONObject.Results)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SchemaResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SchemaResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	slug := data.Slug.ValueString()
	request := operations.DeleteSchemaRequest{
		Slug: slug,
	}
	res, err := r.client.Schemas.DeleteSchema(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if fmt.Sprintf("%v", res.StatusCode)[0] != '2' {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SchemaResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
