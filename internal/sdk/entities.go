// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"epilot-entity/internal/sdk/pkg/models/operations"
	"epilot-entity/internal/sdk/pkg/models/shared"
	"epilot-entity/internal/sdk/pkg/utils"
	"fmt"
	"io"
	"net/http"
	"strings"
)

// entities - CRUD Access for Entities
type entities struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newEntities(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *entities {
	return &entities{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// Autocomplete - autocomplete
// Autocomplete entity attributes
func (s *entities) Autocomplete(ctx context.Context, request operations.AutocompleteRequest) (*operations.AutocompleteResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/v1/entity:autocomplete"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.AutocompleteResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.Autocomplete200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Autocomplete200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// CreateEntity - createEntity
// Creates a new entity using a key.
//
// ## Activity
//
// If no `activity_id` query parameter is provided, implicitly creates Activity of type `EntityCreated`
//
// ## Relations
//
// To create a relation, store a property object that defines a `$relation` array.
//
// Example:
//
// ```json
//
//	{
//	  "contacts": {
//	    "$relation": [
//	      { "entity_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6" }
//	    ]
//	  }
//	}
//
// ```
//
// The items in `$relation` support two properties:
// - `entity_id` - The ID of the entity to link
// - `_tags` - Tags or labels for the relation (optional)
func (s *entities) CreateEntity(ctx context.Context, request operations.CreateEntityRequest) (*operations.CreateEntityResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/v1/entity/{slug}", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.CreateEntityResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.EntityItem = out
		}
	}

	return res, nil
}

// DeleteEntity - deleteEntity
// Deletes an Entity
//
// ## Activity
//
// If no `activity_id` query parameter is provided, implicitly creates Activity of type `EntityDeleted`
func (s *entities) DeleteEntity(ctx context.Context, request operations.DeleteEntityRequest) (*operations.DeleteEntityResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/v1/entity/{slug}/{id}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DeleteEntityResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// GetEntity - getEntity
// Gets Entity and relations by id.
//
// ## Relations
//
// When `hydrate=true`, relation attributes are replaced in-place with nested entity values.
//
// Example:
// ```json
//
//	{
//	  "_id": "123",
//	  "name": "parent",
//	  "_tags": ["parent"],
//	  "contacts": {
//	    "$relation": [
//	      { "entity_id": "456", "_tags": ["primary"] },
//	      { "entity_id": "789", "_tags": ["secondary"] },
//	    ]
//	  },
//	  "addresses": {
//	    "$relation_ref": [
//	      { "entity_id": "123", "_tags": ["primary"], "path": "address.0" },
//	      { "entity_id": "234", "_tags": ["secondary"], "path": "address.0" },
//	    ]
//	  }
//	}
//
// ```
//
// Becomes:
// ```json
//
//	{
//	  "_id": "123",
//	  "name": "parent",
//	  "_tags": ["parent"],
//	  "contacts": [
//	    {
//	      "$relation": { "entity_id": "456", "_tags": ["primary"] },
//	      "_id": "456",
//	      "name": "child 1",
//	      "_tags": ["child"]
//	    },
//	    {
//	      "$relation": { "entity_id": "789", "_tags": ["secondary"] },
//	      "_id": "789",
//	      "name": "child 2",
//	      "_tags": ["child"]
//	    }
//	  ],
//	  "addresses": [
//	    {
//	      "$relation_ref": { "entity_id": "123", "_tags": ["primary"], "path": "address.0" },
//	      "_id": "123",
//	      "address": "address 1",
//	      "_tags": ["child"]
//	    },
//	    {
//	      "$relation_ref": { "entity_id": "234", "_tags": ["secondary"], "path": "address.0" },
//	      "_id": "234",
//	      "address": "address 2",
//	      "_tags": ["child"]
//	    }
//	  ]
//	}
//
// ```
func (s *entities) GetEntity(ctx context.Context, request operations.GetEntityRequest) (*operations.GetEntityResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/v1/entity/{slug}/{id}", request, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetEntityResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *operations.GetEntity200ApplicationJSON
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.GetEntity200ApplicationJSONObject = out
		}
	}

	return res, nil
}

// PatchEntity - patchEntity
// Partially updates an entity with the passed in entity data.
//
// - If an _updated_at is passed and the server contains a newer version of the entity a `409` Error is returned
//
// ## Activity
//
// If no `activity_id` query parameter is provided, implicitly creates Activity of type `EntityUpdated`
//
// ## Relations
//
// To create a relation, store a property that defines a `$relation` array.
//
// Example:
//
// ```json
//
//	{
//	  "contacts": {
//	    "$relation": [
//	      { "entity_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6" }
//	    ]
//	  }
//	}
//
// ```
//
// The items in `$relation` support two properties:
// - `entity_id` - The ID of the entity to link
// - `_tags` - Tags or labels for the relation (optional)
func (s *entities) PatchEntity(ctx context.Context, request operations.PatchEntityRequest) (*operations.PatchEntityResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/v1/entity/{slug}/{id}", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PatchEntityResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.EntityItem = out
		}
	case httpRes.StatusCode == 409:
	}

	return res, nil
}

// SearchEntities - searchEntities
// Search for entities. Supports ordering and pagination. Lucene query syntax supported for complex querying.
//
// Passing comma-separated `x-epilot-org-id` is supported for cross-org entity search.
//
// ## Relations
//
// When `hydrate=true`, relation attributes are replaced in-place with nested entity values.
//
// Example:
// ```json
//
//	{
//	  "_id": "123",
//	  "name": "parent",
//	  "_tags": ["parent"],
//	  "contacts": {
//	    "$relation": [
//	      { "entity_id": "456", "_tags": ["primary"] },
//	      { "entity_id": "789", "_tags": ["secondary"] },
//	    ]
//	  },
//	  "addresses": {
//	    "$relation_ref": [
//	      { "entity_id": "123", "_tags": ["primary"], "path": "address.0" },
//	      { "entity_id": "234", "_tags": ["secondary"], "path": "address.0" },
//	    ]
//	  }
//	}
//
// ```
//
// Becomes:
// ```json
//
//	{
//	  "_id": "123",
//	  "name": "parent",
//	  "_tags": ["parent"],
//	  "contacts": [
//	    {
//	      "$relation": { "entity_id": "456", "_tags": ["primary"] },
//	      "_id": "456",
//	      "name": "child 1",
//	      "_tags": ["child"]
//	    },
//	    {
//	      "$relation": { "entity_id": "789", "_tags": ["secondary"] },
//	      "_id": "789",
//	      "name": "child 2",
//	      "_tags": ["child"]
//	    }
//	  ],
//	  "addresses": [
//	    {
//	      "$relation_ref": { "entity_id": "123", "_tags": ["primary"], "path": "address.0" },
//	      "_id": "123",
//	      "address": "address 1",
//	      "_tags": ["child"]
//	    },
//	    {
//	      "$relation_ref": { "entity_id": "234", "_tags": ["secondary"], "path": "address.0" },
//	      "_id": "234",
//	      "address": "address 2",
//	      "_tags": ["child"]
//	    }
//	  ]
//	}
//
// ```
func (s *entities) SearchEntities(ctx context.Context, request shared.EntitySearchParams) (*operations.SearchEntitiesResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/v1/entity:search"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.SearchEntitiesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.EntitySearchResults
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.EntitySearchResults = out
		case utils.MatchContentType(contentType, `text/csv`):
			data, err := io.ReadAll(httpRes.Body)
			if err != nil {
				return nil, fmt.Errorf("error reading response body: %w", err)
			}

			out := string(data)
			res.SearchEntities200TextCsvString = &out
		}
	}

	return res, nil
}

// UpdateEntity - updateEntity
// Updates an Entity
//
// ## Activity
//
// If no `activity_id` query parameter is provided, implicitly creates Activity of type `EntityUpdated`
//
// ## Relations
//
// To create a relation, store a property that defines a `$relation` array.
//
// Example:
//
// ```json
//
//	{
//	  "contacts": {
//	    "$relation": [
//	      { "entity_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6" }
//	    ]
//	  }
//	}
//
// ```
//
// The items in `$relation` support two properties:
// - `entity_id` - The ID of the entity to link
// - `_tags` - Tags or labels for the relation (optional)
func (s *entities) UpdateEntity(ctx context.Context, request operations.UpdateEntityRequest) (*operations.UpdateEntityResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/v1/entity/{slug}/{id}", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.UpdateEntityResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.EntityItem = out
		}
	}

	return res, nil
}

// UpsertEntity - upsertEntity
// Create or update an entity using `unique_key`
//
// - If no entities are matched, a new entity is created.
// - If exactly one entity is matched, a `PATCH`-style update is applied to the existing entity.
// - If more than one entity is matched a `409` Error is returned
//
// ## Activity
//
// If no `activity_id` query parameter is provided, implicitly creates Activity of type `EntityCreated` or `EntityUpdated`
func (s *entities) UpsertEntity(ctx context.Context, request operations.UpsertEntityRequest) (*operations.UpsertEntityResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/v1/entity/{slug}:upsert", request, nil)

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "RequestBody", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	if err := utils.PopulateQueryParams(ctx, req, request, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.securityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.UpsertEntityResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		fallthrough
	case httpRes.StatusCode == 201:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out map[string]interface{}
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.EntityItem = out
		}
	case httpRes.StatusCode == 409:
	}

	return res, nil
}
