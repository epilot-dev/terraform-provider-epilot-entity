// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-entity/internal/sdk/pkg/utils"
	"time"
)

type Diff struct {
	Added   *Entity `json:"added,omitempty"`
	Deleted *Entity `json:"deleted,omitempty"`
	Updated *Entity `json:"updated,omitempty"`
}

func (o *Diff) GetAdded() *Entity {
	if o == nil {
		return nil
	}
	return o.Added
}

func (o *Diff) GetDeleted() *Entity {
	if o == nil {
		return nil
	}
	return o.Deleted
}

func (o *Diff) GetUpdated() *Entity {
	if o == nil {
		return nil
	}
	return o.Updated
}

type Operation string

const (
	OperationCreateEntity Operation = "createEntity"
	OperationUpdateEntity Operation = "updateEntity"
	OperationDeleteEntity Operation = "deleteEntity"
)

func (e Operation) ToPointer() *Operation {
	return &e
}

func (e *Operation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "createEntity":
		fallthrough
	case "updateEntity":
		fallthrough
	case "deleteEntity":
		*e = Operation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Operation: %v", v)
	}
}

type Params struct {
	ID *string `json:"id,omitempty"`
	// URL-friendly identifier for the entity schema
	Slug *string `json:"slug,omitempty"`
}

func (o *Params) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Params) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type Payload struct {
	CreatedAt *time.Time `json:"_created_at,omitempty"`
	ID        *string    `json:"_id,omitempty"`
	// Organization Id the entity belongs to
	Org *string `json:"_org,omitempty"`
	// URL-friendly identifier for the entity schema
	Schema *string  `json:"_schema,omitempty"`
	Tags   []string `json:"_tags,omitempty"`
	// Title of entity
	Title     *string     `json:"_title,omitempty"`
	UpdatedAt *time.Time  `json:"_updated_at,omitempty"`
	Entity    interface{} `additionalProperties:"true" json:"-"`
}

func (p Payload) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Payload) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Payload) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Payload) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Payload) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *Payload) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *Payload) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Payload) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Payload) GetUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Payload) GetEntity() interface{} {
	if o == nil {
		return nil
	}
	return o.Entity
}

type EntityOperation struct {
	// See https://github.com/ulid/spec
	ActivityID *string   `json:"activity_id,omitempty"`
	Diff       *Diff     `json:"diff,omitempty"`
	Entity     string    `json:"entity"`
	Operation  Operation `json:"operation"`
	Org        string    `json:"org"`
	Params     *Params   `json:"params,omitempty"`
	Payload    *Payload  `json:"payload,omitempty"`
}

func (o *EntityOperation) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *EntityOperation) GetDiff() *Diff {
	if o == nil {
		return nil
	}
	return o.Diff
}

func (o *EntityOperation) GetEntity() string {
	if o == nil {
		return ""
	}
	return o.Entity
}

func (o *EntityOperation) GetOperation() Operation {
	if o == nil {
		return Operation("")
	}
	return o.Operation
}

func (o *EntityOperation) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *EntityOperation) GetParams() *Params {
	if o == nil {
		return nil
	}
	return o.Params
}

func (o *EntityOperation) GetPayload() *Payload {
	if o == nil {
		return nil
	}
	return o.Payload
}
