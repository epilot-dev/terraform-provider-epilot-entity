// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SelectAttributeOptionsOption struct {
	Title *string `json:"title,omitempty"`
	Value string  `json:"value"`
}

type SelectAttributeOptionsType string

const (
	SelectAttributeOptionsTypeSelectAttributeOptionsOption SelectAttributeOptionsType = "SelectAttribute_options_Option"
	SelectAttributeOptionsTypeStr                          SelectAttributeOptionsType = "str"
)

type SelectAttributeOptions struct {
	SelectAttributeOptionsOption *SelectAttributeOptionsOption
	Str                          *string

	Type SelectAttributeOptionsType
}

func CreateSelectAttributeOptionsSelectAttributeOptionsOption(selectAttributeOptionsOption SelectAttributeOptionsOption) SelectAttributeOptions {
	typ := SelectAttributeOptionsTypeSelectAttributeOptionsOption

	return SelectAttributeOptions{
		SelectAttributeOptionsOption: &selectAttributeOptionsOption,
		Type:                         typ,
	}
}

func CreateSelectAttributeOptionsStr(str string) SelectAttributeOptions {
	typ := SelectAttributeOptionsTypeStr

	return SelectAttributeOptions{
		Str:  &str,
		Type: typ,
	}
}

func (u *SelectAttributeOptions) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	selectAttributeOptionsOption := new(SelectAttributeOptionsOption)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&selectAttributeOptionsOption); err == nil {
		u.SelectAttributeOptionsOption = selectAttributeOptionsOption
		u.Type = SelectAttributeOptionsTypeSelectAttributeOptionsOption
		return nil
	}

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = SelectAttributeOptionsTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SelectAttributeOptions) MarshalJSON() ([]byte, error) {
	if u.SelectAttributeOptionsOption != nil {
		return json.Marshal(u.SelectAttributeOptionsOption)
	}

	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	return nil, nil
}

type SelectAttributeTypeEnum string

const (
	SelectAttributeTypeEnumSelect SelectAttributeTypeEnum = "select"
	SelectAttributeTypeEnumRadio  SelectAttributeTypeEnum = "radio"
)

func (e *SelectAttributeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "select":
		fallthrough
	case "radio":
		*e = SelectAttributeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SelectAttributeTypeEnum: %s", s)
	}
}

// SelectAttribute - Dropdown select
type SelectAttribute struct {
	Purpose []string `json:"_purpose,omitempty"`
	// Allow arbitrary input values in addition to provided options
	AllowAny *bool `json:"allow_any,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  map[string]interface{} `json:"constraints,omitempty"`
	DefaultValue interface{}            `json:"default_value,omitempty"`
	Deprecated   *bool                  `json:"deprecated,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `json:"entity_builder_disable_edit,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `json:"hidden,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon    *string                  `json:"icon,omitempty"`
	Label   string                   `json:"label"`
	Layout  *string                  `json:"layout,omitempty"`
	Name    string                   `json:"name"`
	Options []SelectAttributeOptions `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `json:"readonly,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	Required        *bool   `json:"required,omitempty"`
	// This attribute should only be active when the setting is enabled
	SettingFlag *string `json:"setting_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable    *bool                    `json:"show_in_table,omitempty"`
	Type           *SelectAttributeTypeEnum `json:"type,omitempty"`
	ValueFormatter *string                  `json:"value_formatter,omitempty"`
}
