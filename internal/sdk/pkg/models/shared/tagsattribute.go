// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-entity/internal/sdk/pkg/utils"
)

// TagsAttributeConstraints - A set of constraints applicable to the attribute.
// These constraints should and will be enforced by the attribute renderer.
type TagsAttributeConstraints struct {
}

type TagsAttributeType string

const (
	TagsAttributeTypeTags TagsAttributeType = "tags"
)

func (e TagsAttributeType) ToPointer() *TagsAttributeType {
	return &e
}

func (e *TagsAttributeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tags":
		*e = TagsAttributeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TagsAttributeType: %v", v)
	}
}

// TagsAttribute - Tags
type TagsAttribute struct {
	Purpose []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints  *TagsAttributeConstraints `json:"constraints,omitempty"`
	DefaultValue interface{}               `json:"default_value,omitempty"`
	Deprecated   *bool                     `default:"false" json:"deprecated"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `default:"false" json:"entity_builder_disable_edit"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `default:"false" json:"hidden"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon    *string  `json:"icon,omitempty"`
	Label   string   `json:"label"`
	Layout  *string  `json:"layout,omitempty"`
	Name    string   `json:"name"`
	Options []string `json:"options,omitempty"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `default:"true" json:"protected"`
	Readonly  *bool `default:"false" json:"readonly"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	Required        *bool   `default:"false" json:"required"`
	// This attribute should only be active when the setting is enabled
	SettingFlag *string `json:"setting_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable    *bool              `json:"show_in_table,omitempty"`
	Suggestions    []string           `json:"suggestions,omitempty"`
	Type           *TagsAttributeType `json:"type,omitempty"`
	ValueFormatter *string            `json:"value_formatter,omitempty"`
}

func (t TagsAttribute) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TagsAttribute) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *TagsAttribute) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *TagsAttribute) GetConstraints() *TagsAttributeConstraints {
	if o == nil {
		return nil
	}
	return o.Constraints
}

func (o *TagsAttribute) GetDefaultValue() interface{} {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *TagsAttribute) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *TagsAttribute) GetEntityBuilderDisableEdit() *bool {
	if o == nil {
		return nil
	}
	return o.EntityBuilderDisableEdit
}

func (o *TagsAttribute) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *TagsAttribute) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}

func (o *TagsAttribute) GetHidden() *bool {
	if o == nil {
		return nil
	}
	return o.Hidden
}

func (o *TagsAttribute) GetHideLabel() *bool {
	if o == nil {
		return nil
	}
	return o.HideLabel
}

func (o *TagsAttribute) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *TagsAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *TagsAttribute) GetLayout() *string {
	if o == nil {
		return nil
	}
	return o.Layout
}

func (o *TagsAttribute) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *TagsAttribute) GetOptions() []string {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *TagsAttribute) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *TagsAttribute) GetPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.Placeholder
}

func (o *TagsAttribute) GetPreviewValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.PreviewValueFormatter
}

func (o *TagsAttribute) GetProtected() *bool {
	if o == nil {
		return nil
	}
	return o.Protected
}

func (o *TagsAttribute) GetReadonly() *bool {
	if o == nil {
		return nil
	}
	return o.Readonly
}

func (o *TagsAttribute) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *TagsAttribute) GetRequired() *bool {
	if o == nil {
		return nil
	}
	return o.Required
}

func (o *TagsAttribute) GetSettingFlag() *string {
	if o == nil {
		return nil
	}
	return o.SettingFlag
}

func (o *TagsAttribute) GetShowInTable() *bool {
	if o == nil {
		return nil
	}
	return o.ShowInTable
}

func (o *TagsAttribute) GetSuggestions() []string {
	if o == nil {
		return nil
	}
	return o.Suggestions
}

func (o *TagsAttribute) GetType() *TagsAttributeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TagsAttribute) GetValueFormatter() *string {
	if o == nil {
		return nil
	}
	return o.ValueFormatter
}
