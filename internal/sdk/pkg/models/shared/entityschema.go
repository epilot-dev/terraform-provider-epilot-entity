// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/epilot-dev/terraform-provider-epilot-entity/internal/sdk/pkg/utils"
)

type InfoTooltipTitle struct {
	Default *string `json:"default,omitempty"`
	Key     *string `json:"key,omitempty"`
}

func (o *InfoTooltipTitle) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *InfoTooltipTitle) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

type GroupSettings struct {
	Purpose  []string `json:"_purpose,omitempty"`
	Expanded *bool    `json:"expanded,omitempty"`
	// This group should only be active when the feature flag is enabled
	FeatureFlag      *string           `json:"feature_flag,omitempty"`
	ID               string            `json:"id"`
	InfoTooltipTitle *InfoTooltipTitle `json:"info_tooltip_title,omitempty"`
	Label            string            `json:"label"`
	// Render order of the group
	Order           *int64  `default:"0" json:"order"`
	RenderCondition *string `json:"render_condition,omitempty"`
	// This group should only be active when the setting is enabled
	SettingFlag *string `json:"setting_flag,omitempty"`
}

func (g GroupSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GroupSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GroupSettings) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *GroupSettings) GetExpanded() *bool {
	if o == nil {
		return nil
	}
	return o.Expanded
}

func (o *GroupSettings) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *GroupSettings) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GroupSettings) GetInfoTooltipTitle() *InfoTooltipTitle {
	if o == nil {
		return nil
	}
	return o.InfoTooltipTitle
}

func (o *GroupSettings) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *GroupSettings) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *GroupSettings) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *GroupSettings) GetSettingFlag() *string {
	if o == nil {
		return nil
	}
	return o.SettingFlag
}

// LayoutSettings - Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
// - Managed Properties: are interpreted and transformed into layout styles
// - Un-managed Properties: are appended as styles into the attribute mounting node
type LayoutSettings struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// Defines the grid gap for the mounting node of the attribute.
	GridGap *string `json:"grid_gap,omitempty"`
	// Defines the grid column template for the mounting node of the attribute.
	GridTemplateColumns *string `json:"grid_template_columns,omitempty"`
}

func (l LayoutSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LayoutSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LayoutSettings) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *LayoutSettings) GetGridGap() *string {
	if o == nil {
		return nil
	}
	return o.GridGap
}

func (o *LayoutSettings) GetGridTemplateColumns() *string {
	if o == nil {
		return nil
	}
	return o.GridTemplateColumns
}

type CreateViewType string

const (
	CreateViewTypeEntityDefaultCreate CreateViewType = "EntityDefaultCreate"
	CreateViewTypeRedirectEntityView  CreateViewType = "RedirectEntityView"
	CreateViewTypeEntityViewDisabled  CreateViewType = "EntityViewDisabled"
)

type CreateView struct {
	EntityDefaultCreate *EntityDefaultCreate
	RedirectEntityView  *RedirectEntityView
	EntityViewDisabled  *EntityViewDisabled

	Type CreateViewType
}

func CreateCreateViewEntityDefaultCreate(entityDefaultCreate EntityDefaultCreate) CreateView {
	typ := CreateViewTypeEntityDefaultCreate

	return CreateView{
		EntityDefaultCreate: &entityDefaultCreate,
		Type:                typ,
	}
}

func CreateCreateViewRedirectEntityView(redirectEntityView RedirectEntityView) CreateView {
	typ := CreateViewTypeRedirectEntityView

	return CreateView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateCreateViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) CreateView {
	typ := CreateViewTypeEntityViewDisabled

	return CreateView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *CreateView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = CreateViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = CreateViewTypeRedirectEntityView
		return nil
	}

	entityDefaultCreate := new(EntityDefaultCreate)
	if err := utils.UnmarshalJSON(data, &entityDefaultCreate, "", true, true); err == nil {
		u.EntityDefaultCreate = entityDefaultCreate
		u.Type = CreateViewTypeEntityDefaultCreate
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultCreate != nil {
		return utils.MarshalJSON(u.EntityDefaultCreate, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EditViewType string

const (
	EditViewTypeEntityDefaultEdit  EditViewType = "EntityDefaultEdit"
	EditViewTypeRedirectEntityView EditViewType = "RedirectEntityView"
	EditViewTypeEntityViewDisabled EditViewType = "EntityViewDisabled"
)

type EditView struct {
	EntityDefaultEdit  *EntityDefaultEdit
	RedirectEntityView *RedirectEntityView
	EntityViewDisabled *EntityViewDisabled

	Type EditViewType
}

func CreateEditViewEntityDefaultEdit(entityDefaultEdit EntityDefaultEdit) EditView {
	typ := EditViewTypeEntityDefaultEdit

	return EditView{
		EntityDefaultEdit: &entityDefaultEdit,
		Type:              typ,
	}
}

func CreateEditViewRedirectEntityView(redirectEntityView RedirectEntityView) EditView {
	typ := EditViewTypeRedirectEntityView

	return EditView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEditViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EditView {
	typ := EditViewTypeEntityViewDisabled

	return EditView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EditView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = EditViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = EditViewTypeRedirectEntityView
		return nil
	}

	entityDefaultEdit := new(EntityDefaultEdit)
	if err := utils.UnmarshalJSON(data, &entityDefaultEdit, "", true, true); err == nil {
		u.EntityDefaultEdit = entityDefaultEdit
		u.Type = EditViewTypeEntityDefaultEdit
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EditView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultEdit != nil {
		return utils.MarshalJSON(u.EntityDefaultEdit, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type SummaryAttributesType string

const (
	SummaryAttributesTypeSummaryAttribute SummaryAttributesType = "SummaryAttribute"
	SummaryAttributesTypeStr              SummaryAttributesType = "str"
)

type SummaryAttributes struct {
	SummaryAttribute *SummaryAttribute
	Str              *string

	Type SummaryAttributesType
}

func CreateSummaryAttributesSummaryAttribute(summaryAttribute SummaryAttribute) SummaryAttributes {
	typ := SummaryAttributesTypeSummaryAttribute

	return SummaryAttributes{
		SummaryAttribute: &summaryAttribute,
		Type:             typ,
	}
}

func CreateSummaryAttributesStr(str string) SummaryAttributes {
	typ := SummaryAttributesTypeStr

	return SummaryAttributes{
		Str:  &str,
		Type: typ,
	}
}

func (u *SummaryAttributes) UnmarshalJSON(data []byte) error {

	summaryAttribute := new(SummaryAttribute)
	if err := utils.UnmarshalJSON(data, &summaryAttribute, "", true, true); err == nil {
		u.SummaryAttribute = summaryAttribute
		u.Type = SummaryAttributesTypeSummaryAttribute
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = SummaryAttributesTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SummaryAttributes) MarshalJSON() ([]byte, error) {
	if u.SummaryAttribute != nil {
		return utils.MarshalJSON(u.SummaryAttribute, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type ListItem struct {
	SummaryAttributes []SummaryAttributes `json:"summary_attributes,omitempty"`
}

func (o *ListItem) GetSummaryAttributes() []SummaryAttributes {
	if o == nil {
		return nil
	}
	return o.SummaryAttributes
}

type Sharing struct {
	// Show the sharing button in entity detail view
	ShowSharingButton *bool `json:"show_sharing_button,omitempty"`
}

func (o *Sharing) GetShowSharingButton() *bool {
	if o == nil {
		return nil
	}
	return o.ShowSharingButton
}

type SingleViewType string

const (
	SingleViewTypeEntityDefaultEdit  SingleViewType = "EntityDefaultEdit"
	SingleViewTypeRedirectEntityView SingleViewType = "RedirectEntityView"
	SingleViewTypeEntityViewDisabled SingleViewType = "EntityViewDisabled"
)

type SingleView struct {
	EntityDefaultEdit  *EntityDefaultEdit
	RedirectEntityView *RedirectEntityView
	EntityViewDisabled *EntityViewDisabled

	Type SingleViewType
}

func CreateSingleViewEntityDefaultEdit(entityDefaultEdit EntityDefaultEdit) SingleView {
	typ := SingleViewTypeEntityDefaultEdit

	return SingleView{
		EntityDefaultEdit: &entityDefaultEdit,
		Type:              typ,
	}
}

func CreateSingleViewRedirectEntityView(redirectEntityView RedirectEntityView) SingleView {
	typ := SingleViewTypeRedirectEntityView

	return SingleView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateSingleViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) SingleView {
	typ := SingleViewTypeEntityViewDisabled

	return SingleView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *SingleView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = SingleViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = SingleViewTypeRedirectEntityView
		return nil
	}

	entityDefaultEdit := new(EntityDefaultEdit)
	if err := utils.UnmarshalJSON(data, &entityDefaultEdit, "", true, true); err == nil {
		u.EntityDefaultEdit = entityDefaultEdit
		u.Type = SingleViewTypeEntityDefaultEdit
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SingleView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultEdit != nil {
		return utils.MarshalJSON(u.EntityDefaultEdit, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type TableViewType string

const (
	TableViewTypeEntityDefaultTable TableViewType = "EntityDefaultTable"
	TableViewTypeRedirectEntityView TableViewType = "RedirectEntityView"
	TableViewTypeEntityViewDisabled TableViewType = "EntityViewDisabled"
)

type TableView struct {
	EntityDefaultTable *EntityDefaultTable
	RedirectEntityView *RedirectEntityView
	EntityViewDisabled *EntityViewDisabled

	Type TableViewType
}

func CreateTableViewEntityDefaultTable(entityDefaultTable EntityDefaultTable) TableView {
	typ := TableViewTypeEntityDefaultTable

	return TableView{
		EntityDefaultTable: &entityDefaultTable,
		Type:               typ,
	}
}

func CreateTableViewRedirectEntityView(redirectEntityView RedirectEntityView) TableView {
	typ := TableViewTypeRedirectEntityView

	return TableView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateTableViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) TableView {
	typ := TableViewTypeEntityViewDisabled

	return TableView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *TableView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = TableViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = TableViewTypeRedirectEntityView
		return nil
	}

	entityDefaultTable := new(EntityDefaultTable)
	if err := utils.UnmarshalJSON(data, &entityDefaultTable, "", true, true); err == nil {
		u.EntityDefaultTable = entityDefaultTable
		u.Type = TableViewTypeEntityDefaultTable
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TableView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultTable != nil {
		return utils.MarshalJSON(u.EntityDefaultTable, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type UIConfig struct {
	CreateView *CreateView `json:"create_view,omitempty"`
	EditView   *EditView   `json:"edit_view,omitempty"`
	ListItem   *ListItem   `json:"list_item,omitempty"`
	Sharing    *Sharing    `json:"sharing,omitempty"`
	SingleView *SingleView `json:"single_view,omitempty"`
	TableView  *TableView  `json:"table_view,omitempty"`
}

func (o *UIConfig) GetCreateView() *CreateView {
	if o == nil {
		return nil
	}
	return o.CreateView
}

func (o *UIConfig) GetEditView() *EditView {
	if o == nil {
		return nil
	}
	return o.EditView
}

func (o *UIConfig) GetListItem() *ListItem {
	if o == nil {
		return nil
	}
	return o.ListItem
}

func (o *UIConfig) GetSharing() *Sharing {
	if o == nil {
		return nil
	}
	return o.Sharing
}

func (o *UIConfig) GetSingleView() *SingleView {
	if o == nil {
		return nil
	}
	return o.SingleView
}

func (o *UIConfig) GetTableView() *TableView {
	if o == nil {
		return nil
	}
	return o.TableView
}

// EntitySchema - The "type" of an Entity. Describes the shape. Includes Entity Attributes, Relations and Capabilities.
type EntitySchema struct {
	// An ordered list of attributes the entity contains
	Attributes []Attribute `json:"attributes,omitempty"`
	// Reference to blueprint
	Blueprint    *string                `json:"blueprint,omitempty"`
	Capabilities []EntityCapability     `json:"capabilities,omitempty"`
	DialogConfig map[string]interface{} `json:"dialog_config,omitempty"`
	Draft        *bool                  `json:"draft,omitempty"`
	// This schema should only be active when one of the organization settings is enabled
	EnableSetting []string `json:"enable_setting,omitempty"`
	// Advanced: explicit Elasticsearch index mapping definitions for entity data
	//
	ExplicitSearchMappings map[string]SearchMappings `json:"explicit_search_mappings,omitempty"`
	// This schema should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// A dictionary of Group Titles and associated settings if present.
	GroupSettings []GroupSettings `json:"group_settings,omitempty"`
	Icon          *string         `json:"icon,omitempty"`
	// Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
	// - Managed Properties: are interpreted and transformed into layout styles
	// - Un-managed Properties: are appended as styles into the attribute mounting node
	//
	LayoutSettings *LayoutSettings `json:"layout_settings,omitempty"`
	// User-friendly identifier for the entity schema
	Name      string `json:"name"`
	Plural    string `json:"plural"`
	Published *bool  `json:"published,omitempty"`
	// URL-friendly identifier for the entity schema
	Slug string `json:"slug"`
	// Template for rendering the title field. Uses handlebars
	TitleTemplate *string   `json:"title_template,omitempty"`
	UIConfig      *UIConfig `json:"ui_config,omitempty"`
	Version       *int64    `json:"version,omitempty"`
}

func (o *EntitySchema) GetAttributes() []Attribute {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *EntitySchema) GetBlueprint() *string {
	if o == nil {
		return nil
	}
	return o.Blueprint
}

func (o *EntitySchema) GetCapabilities() []EntityCapability {
	if o == nil {
		return nil
	}
	return o.Capabilities
}

func (o *EntitySchema) GetDialogConfig() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.DialogConfig
}

func (o *EntitySchema) GetDraft() *bool {
	if o == nil {
		return nil
	}
	return o.Draft
}

func (o *EntitySchema) GetEnableSetting() []string {
	if o == nil {
		return nil
	}
	return o.EnableSetting
}

func (o *EntitySchema) GetExplicitSearchMappings() map[string]SearchMappings {
	if o == nil {
		return nil
	}
	return o.ExplicitSearchMappings
}

func (o *EntitySchema) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *EntitySchema) GetGroupSettings() []GroupSettings {
	if o == nil {
		return nil
	}
	return o.GroupSettings
}

func (o *EntitySchema) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *EntitySchema) GetLayoutSettings() *LayoutSettings {
	if o == nil {
		return nil
	}
	return o.LayoutSettings
}

func (o *EntitySchema) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *EntitySchema) GetPlural() string {
	if o == nil {
		return ""
	}
	return o.Plural
}

func (o *EntitySchema) GetPublished() *bool {
	if o == nil {
		return nil
	}
	return o.Published
}

func (o *EntitySchema) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *EntitySchema) GetTitleTemplate() *string {
	if o == nil {
		return nil
	}
	return o.TitleTemplate
}

func (o *EntitySchema) GetUIConfig() *UIConfig {
	if o == nil {
		return nil
	}
	return o.UIConfig
}

func (o *EntitySchema) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}
