// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type SavedViewCreatedBy2Source string

const (
	SavedViewCreatedBy2SourceSystem    SavedViewCreatedBy2Source = "SYSTEM"
	SavedViewCreatedBy2SourceBlueprint SavedViewCreatedBy2Source = "BLUEPRINT"
)

func (e SavedViewCreatedBy2Source) ToPointer() *SavedViewCreatedBy2Source {
	return &e
}

func (e *SavedViewCreatedBy2Source) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYSTEM":
		fallthrough
	case "BLUEPRINT":
		*e = SavedViewCreatedBy2Source(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavedViewCreatedBy2Source: %v", v)
	}
}

// SavedViewCreatedBy2 - A system-created view
type SavedViewCreatedBy2 struct {
	Source *SavedViewCreatedBy2Source `json:"source,omitempty"`

	AdditionalProperties interface{} `json:"-"`
}
type _SavedViewCreatedBy2 SavedViewCreatedBy2

func (c *SavedViewCreatedBy2) UnmarshalJSON(bs []byte) error {
	data := _SavedViewCreatedBy2{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = SavedViewCreatedBy2(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "source")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c SavedViewCreatedBy2) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_SavedViewCreatedBy2(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}

// SavedViewCreatedBy1 - A user that created the view
type SavedViewCreatedBy1 struct {
	UserID *string `json:"user_id,omitempty"`
}

type SavedViewCreatedByType string

const (
	SavedViewCreatedByTypeSavedViewCreatedBy1 SavedViewCreatedByType = "SavedView_created_by_1"
	SavedViewCreatedByTypeSavedViewCreatedBy2 SavedViewCreatedByType = "SavedView_created_by_2"
)

type SavedViewCreatedBy struct {
	SavedViewCreatedBy1 *SavedViewCreatedBy1
	SavedViewCreatedBy2 *SavedViewCreatedBy2

	Type SavedViewCreatedByType
}

func CreateSavedViewCreatedBySavedViewCreatedBy1(savedViewCreatedBy1 SavedViewCreatedBy1) SavedViewCreatedBy {
	typ := SavedViewCreatedByTypeSavedViewCreatedBy1

	return SavedViewCreatedBy{
		SavedViewCreatedBy1: &savedViewCreatedBy1,
		Type:                typ,
	}
}

func CreateSavedViewCreatedBySavedViewCreatedBy2(savedViewCreatedBy2 SavedViewCreatedBy2) SavedViewCreatedBy {
	typ := SavedViewCreatedByTypeSavedViewCreatedBy2

	return SavedViewCreatedBy{
		SavedViewCreatedBy2: &savedViewCreatedBy2,
		Type:                typ,
	}
}

func (u *SavedViewCreatedBy) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	savedViewCreatedBy1 := new(SavedViewCreatedBy1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&savedViewCreatedBy1); err == nil {
		u.SavedViewCreatedBy1 = savedViewCreatedBy1
		u.Type = SavedViewCreatedByTypeSavedViewCreatedBy1
		return nil
	}

	savedViewCreatedBy2 := new(SavedViewCreatedBy2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&savedViewCreatedBy2); err == nil {
		u.SavedViewCreatedBy2 = savedViewCreatedBy2
		u.Type = SavedViewCreatedByTypeSavedViewCreatedBy2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u SavedViewCreatedBy) MarshalJSON() ([]byte, error) {
	if u.SavedViewCreatedBy1 != nil {
		return json.Marshal(u.SavedViewCreatedBy1)
	}

	if u.SavedViewCreatedBy2 != nil {
		return json.Marshal(u.SavedViewCreatedBy2)
	}

	return nil, nil
}

// SavedView - A saved entity view
type SavedView struct {
	CreatedBy SavedViewCreatedBy `json:"created_by"`
	// User-friendly identifier for the saved view
	Name string `json:"name"`
	// Organisation ID a view belongs to
	Org *string `json:"org,omitempty"`
	// boolean property for if a view is shared with organisation
	Shared *bool `json:"shared,omitempty"`
	// list of schemas a view can belong to
	Slug     []string               `json:"slug"`
	UIConfig map[string]interface{} `json:"ui_config"`
}
