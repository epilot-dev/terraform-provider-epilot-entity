// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-entity/internal/sdk/pkg/utils"
)

type SearchMappingsType string

const (
	SearchMappingsTypeKeyword   SearchMappingsType = "keyword"
	SearchMappingsTypeText      SearchMappingsType = "text"
	SearchMappingsTypeBoolean   SearchMappingsType = "boolean"
	SearchMappingsTypeInteger   SearchMappingsType = "integer"
	SearchMappingsTypeLong      SearchMappingsType = "long"
	SearchMappingsTypeFloat     SearchMappingsType = "float"
	SearchMappingsTypeDate      SearchMappingsType = "date"
	SearchMappingsTypeFlattened SearchMappingsType = "flattened"
	SearchMappingsTypeNested    SearchMappingsType = "nested"
)

func (e SearchMappingsType) ToPointer() *SearchMappingsType {
	return &e
}

func (e *SearchMappingsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "keyword":
		fallthrough
	case "text":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "long":
		fallthrough
	case "float":
		fallthrough
	case "date":
		fallthrough
	case "flattened":
		fallthrough
	case "nested":
		*e = SearchMappingsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchMappingsType: %v", v)
	}
}

type SearchMappings struct {
	Fields map[string]interface{} `json:"fields,omitempty"`
	Index  *bool                  `default:"true" json:"index"`
	Type   *SearchMappingsType    `json:"type,omitempty"`
}

func (s SearchMappings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchMappings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchMappings) GetFields() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *SearchMappings) GetIndex() *bool {
	if o == nil {
		return nil
	}
	return o.Index
}

func (o *SearchMappings) GetType() *SearchMappingsType {
	if o == nil {
		return nil
	}
	return o.Type
}
