// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SearchMappingsTypeEnum string

const (
	SearchMappingsTypeEnumKeyword   SearchMappingsTypeEnum = "keyword"
	SearchMappingsTypeEnumText      SearchMappingsTypeEnum = "text"
	SearchMappingsTypeEnumBoolean   SearchMappingsTypeEnum = "boolean"
	SearchMappingsTypeEnumInteger   SearchMappingsTypeEnum = "integer"
	SearchMappingsTypeEnumLong      SearchMappingsTypeEnum = "long"
	SearchMappingsTypeEnumFloat     SearchMappingsTypeEnum = "float"
	SearchMappingsTypeEnumDate      SearchMappingsTypeEnum = "date"
	SearchMappingsTypeEnumFlattened SearchMappingsTypeEnum = "flattened"
	SearchMappingsTypeEnumNested    SearchMappingsTypeEnum = "nested"
)

func (e *SearchMappingsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "keyword":
		fallthrough
	case "text":
		fallthrough
	case "boolean":
		fallthrough
	case "integer":
		fallthrough
	case "long":
		fallthrough
	case "float":
		fallthrough
	case "date":
		fallthrough
	case "flattened":
		fallthrough
	case "nested":
		*e = SearchMappingsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchMappingsTypeEnum: %s", s)
	}
}

type SearchMappings struct {
	Index *bool                   `json:"index,omitempty"`
	Type  *SearchMappingsTypeEnum `json:"type,omitempty"`
}
