// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

type Entity struct {
	CreatedAt *time.Time `json:"_created_at,omitempty"`
	ID        *string    `json:"_id,omitempty"`
	// Organization Id the entity belongs to
	Org *string `json:"_org,omitempty"`
	// URL-friendly identifier for the entity schema
	Schema *string  `json:"_schema,omitempty"`
	Tags   []string `json:"_tags,omitempty"`
	// Title of entity
	Title     *string    `json:"_title,omitempty"`
	UpdatedAt *time.Time `json:"_updated_at,omitempty"`

	AdditionalProperties map[string]interface{} `json:"-"`
}
type _Entity Entity

func (c *Entity) UnmarshalJSON(bs []byte) error {
	data := _Entity{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = Entity(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "_created_at")
	delete(additionalFields, "_id")
	delete(additionalFields, "_org")
	delete(additionalFields, "_schema")
	delete(additionalFields, "_tags")
	delete(additionalFields, "_title")
	delete(additionalFields, "_updated_at")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c Entity) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_Entity(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
