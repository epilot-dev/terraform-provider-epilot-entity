// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type EntityDefaultTableDropdownItems2TypeEnum string

const (
	EntityDefaultTableDropdownItems2TypeEnumLink EntityDefaultTableDropdownItems2TypeEnum = "link"
)

func (e EntityDefaultTableDropdownItems2TypeEnum) ToPointer() *EntityDefaultTableDropdownItems2TypeEnum {
	return &e
}

func (e *EntityDefaultTableDropdownItems2TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		*e = EntityDefaultTableDropdownItems2TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityDefaultTableDropdownItems2TypeEnum: %v", v)
	}
}

type EntityDefaultTableDropdownItems2 struct {
	// This dropdown item should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Only show item for legacy tenants (ivy)
	Legacy *bool                                     `json:"legacy,omitempty"`
	Title  *string                                   `json:"title,omitempty"`
	Type   *EntityDefaultTableDropdownItems2TypeEnum `json:"type,omitempty"`
	URI    *string                                   `json:"uri,omitempty"`
}

type EntityDefaultTableDropdownItems1TypeEnum string

const (
	EntityDefaultTableDropdownItems1TypeEnumEntity EntityDefaultTableDropdownItems1TypeEnum = "entity"
)

func (e EntityDefaultTableDropdownItems1TypeEnum) ToPointer() *EntityDefaultTableDropdownItems1TypeEnum {
	return &e
}

func (e *EntityDefaultTableDropdownItems1TypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "entity":
		*e = EntityDefaultTableDropdownItems1TypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityDefaultTableDropdownItems1TypeEnum: %v", v)
	}
}

type EntityDefaultTableDropdownItems1 struct {
	// URL-friendly identifier for the entity schema
	Entity *string `json:"entity,omitempty"`
	// This dropdown item should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Only show item for legacy tenants (ivy)
	Legacy *bool                                     `json:"legacy,omitempty"`
	Type   *EntityDefaultTableDropdownItems1TypeEnum `json:"type,omitempty"`
}

type EntityDefaultTableDropdownItemsType string

const (
	EntityDefaultTableDropdownItemsTypeEntityDefaultTableDropdownItems1 EntityDefaultTableDropdownItemsType = "EntityDefaultTable_dropdown_items_1"
	EntityDefaultTableDropdownItemsTypeEntityDefaultTableDropdownItems2 EntityDefaultTableDropdownItemsType = "EntityDefaultTable_dropdown_items_2"
)

type EntityDefaultTableDropdownItems struct {
	EntityDefaultTableDropdownItems1 *EntityDefaultTableDropdownItems1
	EntityDefaultTableDropdownItems2 *EntityDefaultTableDropdownItems2

	Type EntityDefaultTableDropdownItemsType
}

func CreateEntityDefaultTableDropdownItemsEntityDefaultTableDropdownItems1(entityDefaultTableDropdownItems1 EntityDefaultTableDropdownItems1) EntityDefaultTableDropdownItems {
	typ := EntityDefaultTableDropdownItemsTypeEntityDefaultTableDropdownItems1

	return EntityDefaultTableDropdownItems{
		EntityDefaultTableDropdownItems1: &entityDefaultTableDropdownItems1,
		Type:                             typ,
	}
}

func CreateEntityDefaultTableDropdownItemsEntityDefaultTableDropdownItems2(entityDefaultTableDropdownItems2 EntityDefaultTableDropdownItems2) EntityDefaultTableDropdownItems {
	typ := EntityDefaultTableDropdownItemsTypeEntityDefaultTableDropdownItems2

	return EntityDefaultTableDropdownItems{
		EntityDefaultTableDropdownItems2: &entityDefaultTableDropdownItems2,
		Type:                             typ,
	}
}

func (u *EntityDefaultTableDropdownItems) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	entityDefaultTableDropdownItems1 := new(EntityDefaultTableDropdownItems1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&entityDefaultTableDropdownItems1); err == nil {
		u.EntityDefaultTableDropdownItems1 = entityDefaultTableDropdownItems1
		u.Type = EntityDefaultTableDropdownItemsTypeEntityDefaultTableDropdownItems1
		return nil
	}

	entityDefaultTableDropdownItems2 := new(EntityDefaultTableDropdownItems2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&entityDefaultTableDropdownItems2); err == nil {
		u.EntityDefaultTableDropdownItems2 = entityDefaultTableDropdownItems2
		u.Type = EntityDefaultTableDropdownItemsTypeEntityDefaultTableDropdownItems2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntityDefaultTableDropdownItems) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultTableDropdownItems1 != nil {
		return json.Marshal(u.EntityDefaultTableDropdownItems1)
	}

	if u.EntityDefaultTableDropdownItems2 != nil {
		return json.Marshal(u.EntityDefaultTableDropdownItems2)
	}

	return nil, nil
}

type EntityDefaultTableNavbarActionsOptions struct {
	Label  string                 `json:"label"`
	Params map[string]interface{} `json:"params,omitempty"`
}

type EntityDefaultTableNavbarActions struct {
	Options []EntityDefaultTableNavbarActionsOptions `json:"options,omitempty"`
	Type    string                                   `json:"type"`
}

type EntityDefaultTableViewTypeEnum string

const (
	EntityDefaultTableViewTypeEnumDefault EntityDefaultTableViewTypeEnum = "default"
)

func (e EntityDefaultTableViewTypeEnum) ToPointer() *EntityDefaultTableViewTypeEnum {
	return &e
}

func (e *EntityDefaultTableViewTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		*e = EntityDefaultTableViewTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityDefaultTableViewTypeEnum: %v", v)
	}
}

type EntityDefaultTable struct {
	ClassicView   *string                           `json:"classic_view,omitempty"`
	DropdownItems []EntityDefaultTableDropdownItems `json:"dropdown_items,omitempty"`
	// Enable the thumbnail column
	EnableThumbnails *bool                             `json:"enable_thumbnails,omitempty"`
	NavbarActions    []EntityDefaultTableNavbarActions `json:"navbar_actions,omitempty"`
	RowActions       []string                          `json:"row_actions,omitempty"`
	ViewType         *EntityDefaultTableViewTypeEnum   `json:"view_type,omitempty"`
}
