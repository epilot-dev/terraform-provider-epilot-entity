// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-entity/internal/sdk/pkg/utils"
)

type EntityDefaultTableSchemasType string

const (
	EntityDefaultTableSchemasTypeLink EntityDefaultTableSchemasType = "link"
)

func (e EntityDefaultTableSchemasType) ToPointer() *EntityDefaultTableSchemasType {
	return &e
}

func (e *EntityDefaultTableSchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "link":
		*e = EntityDefaultTableSchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityDefaultTableSchemasType: %v", v)
	}
}

type Two struct {
	// This dropdown item should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Only show item for legacy tenants (ivy)
	Legacy *bool                          `json:"legacy,omitempty"`
	Title  *string                        `json:"title,omitempty"`
	Type   *EntityDefaultTableSchemasType `json:"type,omitempty"`
	URI    *string                        `json:"uri,omitempty"`
}

func (o *Two) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *Two) GetLegacy() *bool {
	if o == nil {
		return nil
	}
	return o.Legacy
}

func (o *Two) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Two) GetType() *EntityDefaultTableSchemasType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Two) GetURI() *string {
	if o == nil {
		return nil
	}
	return o.URI
}

type EntityDefaultTableType string

const (
	EntityDefaultTableTypeEntity EntityDefaultTableType = "entity"
)

func (e EntityDefaultTableType) ToPointer() *EntityDefaultTableType {
	return &e
}

func (e *EntityDefaultTableType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "entity":
		*e = EntityDefaultTableType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityDefaultTableType: %v", v)
	}
}

type EntityDefaultTable1 struct {
	// URL-friendly identifier for the entity schema
	Entity *string `json:"entity,omitempty"`
	// This dropdown item should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Only show item for legacy tenants (ivy)
	Legacy *bool                   `json:"legacy,omitempty"`
	Type   *EntityDefaultTableType `json:"type,omitempty"`
}

func (o *EntityDefaultTable1) GetEntity() *string {
	if o == nil {
		return nil
	}
	return o.Entity
}

func (o *EntityDefaultTable1) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *EntityDefaultTable1) GetLegacy() *bool {
	if o == nil {
		return nil
	}
	return o.Legacy
}

func (o *EntityDefaultTable1) GetType() *EntityDefaultTableType {
	if o == nil {
		return nil
	}
	return o.Type
}

type DropdownItemsType string

const (
	DropdownItemsTypeEntityDefaultTable1 DropdownItemsType = "EntityDefaultTable_1"
	DropdownItemsTypeTwo                 DropdownItemsType = "2"
)

type DropdownItems struct {
	EntityDefaultTable1 *EntityDefaultTable1
	Two                 *Two

	Type DropdownItemsType
}

func CreateDropdownItemsEntityDefaultTable1(entityDefaultTable1 EntityDefaultTable1) DropdownItems {
	typ := DropdownItemsTypeEntityDefaultTable1

	return DropdownItems{
		EntityDefaultTable1: &entityDefaultTable1,
		Type:                typ,
	}
}

func CreateDropdownItemsTwo(two Two) DropdownItems {
	typ := DropdownItemsTypeTwo

	return DropdownItems{
		Two:  &two,
		Type: typ,
	}
}

func (u *DropdownItems) UnmarshalJSON(data []byte) error {

	entityDefaultTable1 := new(EntityDefaultTable1)
	if err := utils.UnmarshalJSON(data, &entityDefaultTable1, "", true, true); err == nil {
		u.EntityDefaultTable1 = entityDefaultTable1
		u.Type = DropdownItemsTypeEntityDefaultTable1
		return nil
	}

	two := new(Two)
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = two
		u.Type = DropdownItemsTypeTwo
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u DropdownItems) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultTable1 != nil {
		return utils.MarshalJSON(u.EntityDefaultTable1, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntityDefaultTableParams struct {
}

type EntityDefaultTableOptions struct {
	Label  string                    `json:"label"`
	Params *EntityDefaultTableParams `json:"params,omitempty"`
}

func (o *EntityDefaultTableOptions) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *EntityDefaultTableOptions) GetParams() *EntityDefaultTableParams {
	if o == nil {
		return nil
	}
	return o.Params
}

type NavbarActions struct {
	Options []EntityDefaultTableOptions `json:"options,omitempty"`
	Type    string                      `json:"type"`
}

func (o *NavbarActions) GetOptions() []EntityDefaultTableOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *NavbarActions) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

type EntityDefaultTableViewType string

const (
	EntityDefaultTableViewTypeDefault EntityDefaultTableViewType = "default"
)

func (e EntityDefaultTableViewType) ToPointer() *EntityDefaultTableViewType {
	return &e
}

func (e *EntityDefaultTableViewType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		*e = EntityDefaultTableViewType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityDefaultTableViewType: %v", v)
	}
}

type EntityDefaultTable struct {
	ClassicView   *string         `json:"classic_view,omitempty"`
	DropdownItems []DropdownItems `json:"dropdown_items,omitempty"`
	// Enable the thumbnail column
	EnableThumbnails *bool                       `default:"false" json:"enable_thumbnails"`
	NavbarActions    []NavbarActions             `json:"navbar_actions,omitempty"`
	RowActions       []string                    `json:"row_actions,omitempty"`
	ViewType         *EntityDefaultTableViewType `json:"view_type,omitempty"`
}

func (e EntityDefaultTable) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntityDefaultTable) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *EntityDefaultTable) GetClassicView() *string {
	if o == nil {
		return nil
	}
	return o.ClassicView
}

func (o *EntityDefaultTable) GetDropdownItems() []DropdownItems {
	if o == nil {
		return nil
	}
	return o.DropdownItems
}

func (o *EntityDefaultTable) GetEnableThumbnails() *bool {
	if o == nil {
		return nil
	}
	return o.EnableThumbnails
}

func (o *EntityDefaultTable) GetNavbarActions() []NavbarActions {
	if o == nil {
		return nil
	}
	return o.NavbarActions
}

func (o *EntityDefaultTable) GetRowActions() []string {
	if o == nil {
		return nil
	}
	return o.RowActions
}

func (o *EntityDefaultTable) GetViewType() *EntityDefaultTableViewType {
	if o == nil {
		return nil
	}
	return o.ViewType
}
