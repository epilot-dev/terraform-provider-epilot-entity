// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

// CurrencyAttributeCurrency1 - A currency configuration
type CurrencyAttributeCurrency1 struct {
	Code        string  `json:"code"`
	Description string  `json:"description"`
	Flag        *string `json:"flag,omitempty"`
	Symbol      string  `json:"symbol"`
}

type CurrencyAttributeCurrencyType string

const (
	CurrencyAttributeCurrencyTypeCurrencyAttributeCurrency1 CurrencyAttributeCurrencyType = "CurrencyAttribute_currency_1"
)

type CurrencyAttributeCurrency struct {
	CurrencyAttributeCurrency1 *CurrencyAttributeCurrency1

	Type CurrencyAttributeCurrencyType
}

func CreateCurrencyAttributeCurrencyCurrencyAttributeCurrency1(currencyAttributeCurrency1 CurrencyAttributeCurrency1) CurrencyAttributeCurrency {
	typ := CurrencyAttributeCurrencyTypeCurrencyAttributeCurrency1

	return CurrencyAttributeCurrency{
		CurrencyAttributeCurrency1: &currencyAttributeCurrency1,
		Type:                       typ,
	}
}

func (u *CurrencyAttributeCurrency) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	currencyAttributeCurrency1 := new(CurrencyAttributeCurrency1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&currencyAttributeCurrency1); err == nil {
		u.CurrencyAttributeCurrency1 = currencyAttributeCurrency1
		u.Type = CurrencyAttributeCurrencyTypeCurrencyAttributeCurrency1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CurrencyAttributeCurrency) MarshalJSON() ([]byte, error) {
	if u.CurrencyAttributeCurrency1 != nil {
		return json.Marshal(u.CurrencyAttributeCurrency1)
	}

	return nil, nil
}

type CurrencyAttributeTypeEnum string

const (
	CurrencyAttributeTypeEnumCurrency CurrencyAttributeTypeEnum = "currency"
)

func (e *CurrencyAttributeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "currency":
		*e = CurrencyAttributeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CurrencyAttributeTypeEnum: %s", s)
	}
}

// CurrencyAttribute - Currency input
type CurrencyAttribute struct {
	Purpose []string `json:"_purpose,omitempty"`
	// A set of constraints applicable to the attribute.
	// These constraints should and will be enforced by the attribute renderer.
	//
	Constraints map[string]interface{} `json:"constraints,omitempty"`
	// An array of currency configurations with a country code (ISO-4217)
	Currency             []CurrencyAttributeCurrency `json:"currency"`
	CurrencySelectorOnly *bool                       `json:"currency_selector_only,omitempty"`
	DefaultValue         interface{}                 `json:"default_value,omitempty"`
	Deprecated           *bool                       `json:"deprecated,omitempty"`
	// Setting to `true` disables editing the attribute on the entity builder UI
	EntityBuilderDisableEdit *bool `json:"entity_builder_disable_edit,omitempty"`
	// This attribute should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// Which group the attribute should appear in. Accepts group ID or group name
	Group *string `json:"group,omitempty"`
	// Do not render attribute in entity views
	Hidden *bool `json:"hidden,omitempty"`
	// When set to true, will hide the label of the field.
	HideLabel *bool `json:"hide_label,omitempty"`
	// Code name of the icon to used to represent this attribute.
	// The value must be a valid @epilot/base-elements Icon name
	//
	Icon   *string `json:"icon,omitempty"`
	Label  string  `json:"label"`
	Layout *string `json:"layout,omitempty"`
	Name   string  `json:"name"`
	// Attribute sort order (ascending) in group
	Order                 *int64  `json:"order,omitempty"`
	Placeholder           *string `json:"placeholder,omitempty"`
	PreviewValueFormatter *string `json:"preview_value_formatter,omitempty"`
	// Setting to `true` prevents the attribute from being modified / deleted
	Protected *bool `json:"protected,omitempty"`
	Readonly  *bool `json:"readonly,omitempty"`
	// Defines the conditional rendering expression for showing this field.
	// When a valid expression is parsed, their evaluation defines the visibility of this attribute.
	// Note: Empty or invalid expression have no effect on the field visibility.
	//
	RenderCondition *string `json:"render_condition,omitempty"`
	Required        *bool   `json:"required,omitempty"`
	// This attribute should only be active when the setting is enabled
	SettingFlag *string `json:"setting_flag,omitempty"`
	// Render as a column in table views. When defined, overrides `hidden`
	ShowInTable    *bool                     `json:"show_in_table,omitempty"`
	Type           CurrencyAttributeTypeEnum `json:"type"`
	ValueFormatter *string                   `json:"value_formatter,omitempty"`
}
