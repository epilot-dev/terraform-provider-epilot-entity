// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/epilot-dev/terraform-provider-epilot-entity/internal/sdk/pkg/utils"
)

type EntitySchemaItemInfoTooltipTitle struct {
	Default *string `json:"default,omitempty"`
	Key     *string `json:"key,omitempty"`
}

func (o *EntitySchemaItemInfoTooltipTitle) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *EntitySchemaItemInfoTooltipTitle) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

type EntitySchemaItemGroupSettings struct {
	Purpose  []string `json:"_purpose,omitempty"`
	Expanded *bool    `json:"expanded,omitempty"`
	// This group should only be active when the feature flag is enabled
	FeatureFlag      *string                           `json:"feature_flag,omitempty"`
	ID               string                            `json:"id"`
	InfoTooltipTitle *EntitySchemaItemInfoTooltipTitle `json:"info_tooltip_title,omitempty"`
	Label            string                            `json:"label"`
	// Render order of the group
	Order           *int64  `default:"0" json:"order"`
	RenderCondition *string `json:"render_condition,omitempty"`
	// This group should only be active when the setting is enabled
	SettingFlag *string `json:"setting_flag,omitempty"`
}

func (e EntitySchemaItemGroupSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntitySchemaItemGroupSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EntitySchemaItemGroupSettings) GetPurpose() []string {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *EntitySchemaItemGroupSettings) GetExpanded() *bool {
	if o == nil {
		return nil
	}
	return o.Expanded
}

func (o *EntitySchemaItemGroupSettings) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *EntitySchemaItemGroupSettings) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EntitySchemaItemGroupSettings) GetInfoTooltipTitle() *EntitySchemaItemInfoTooltipTitle {
	if o == nil {
		return nil
	}
	return o.InfoTooltipTitle
}

func (o *EntitySchemaItemGroupSettings) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *EntitySchemaItemGroupSettings) GetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *EntitySchemaItemGroupSettings) GetRenderCondition() *string {
	if o == nil {
		return nil
	}
	return o.RenderCondition
}

func (o *EntitySchemaItemGroupSettings) GetSettingFlag() *string {
	if o == nil {
		return nil
	}
	return o.SettingFlag
}

// EntitySchemaItemLayoutSettings - Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
// - Managed Properties: are interpreted and transformed into layout styles
// - Un-managed Properties: are appended as styles into the attribute mounting node
type EntitySchemaItemLayoutSettings struct {
	AdditionalProperties interface{} `additionalProperties:"true" json:"-"`
	// Defines the grid gap for the mounting node of the attribute.
	GridGap *string `json:"grid_gap,omitempty"`
	// Defines the grid column template for the mounting node of the attribute.
	GridTemplateColumns *string `json:"grid_template_columns,omitempty"`
}

func (e EntitySchemaItemLayoutSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EntitySchemaItemLayoutSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EntitySchemaItemLayoutSettings) GetAdditionalProperties() interface{} {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

func (o *EntitySchemaItemLayoutSettings) GetGridGap() *string {
	if o == nil {
		return nil
	}
	return o.GridGap
}

func (o *EntitySchemaItemLayoutSettings) GetGridTemplateColumns() *string {
	if o == nil {
		return nil
	}
	return o.GridTemplateColumns
}

type Source struct {
	ID   *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

func (o *Source) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Source) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type EntitySchemaItemCreateViewType string

const (
	EntitySchemaItemCreateViewTypeEntityDefaultCreate EntitySchemaItemCreateViewType = "EntityDefaultCreate"
	EntitySchemaItemCreateViewTypeRedirectEntityView  EntitySchemaItemCreateViewType = "RedirectEntityView"
	EntitySchemaItemCreateViewTypeEntityViewDisabled  EntitySchemaItemCreateViewType = "EntityViewDisabled"
)

type EntitySchemaItemCreateView struct {
	EntityDefaultCreate *EntityDefaultCreate
	RedirectEntityView  *RedirectEntityView
	EntityViewDisabled  *EntityViewDisabled

	Type EntitySchemaItemCreateViewType
}

func CreateEntitySchemaItemCreateViewEntityDefaultCreate(entityDefaultCreate EntityDefaultCreate) EntitySchemaItemCreateView {
	typ := EntitySchemaItemCreateViewTypeEntityDefaultCreate

	return EntitySchemaItemCreateView{
		EntityDefaultCreate: &entityDefaultCreate,
		Type:                typ,
	}
}

func CreateEntitySchemaItemCreateViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaItemCreateView {
	typ := EntitySchemaItemCreateViewTypeRedirectEntityView

	return EntitySchemaItemCreateView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaItemCreateViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaItemCreateView {
	typ := EntitySchemaItemCreateViewTypeEntityViewDisabled

	return EntitySchemaItemCreateView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaItemCreateView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = EntitySchemaItemCreateViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = EntitySchemaItemCreateViewTypeRedirectEntityView
		return nil
	}

	entityDefaultCreate := new(EntityDefaultCreate)
	if err := utils.UnmarshalJSON(data, &entityDefaultCreate, "", true, true); err == nil {
		u.EntityDefaultCreate = entityDefaultCreate
		u.Type = EntitySchemaItemCreateViewTypeEntityDefaultCreate
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntitySchemaItemCreateView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultCreate != nil {
		return utils.MarshalJSON(u.EntityDefaultCreate, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntitySchemaItemEditViewType string

const (
	EntitySchemaItemEditViewTypeEntityDefaultEdit  EntitySchemaItemEditViewType = "EntityDefaultEdit"
	EntitySchemaItemEditViewTypeRedirectEntityView EntitySchemaItemEditViewType = "RedirectEntityView"
	EntitySchemaItemEditViewTypeEntityViewDisabled EntitySchemaItemEditViewType = "EntityViewDisabled"
)

type EntitySchemaItemEditView struct {
	EntityDefaultEdit  *EntityDefaultEdit
	RedirectEntityView *RedirectEntityView
	EntityViewDisabled *EntityViewDisabled

	Type EntitySchemaItemEditViewType
}

func CreateEntitySchemaItemEditViewEntityDefaultEdit(entityDefaultEdit EntityDefaultEdit) EntitySchemaItemEditView {
	typ := EntitySchemaItemEditViewTypeEntityDefaultEdit

	return EntitySchemaItemEditView{
		EntityDefaultEdit: &entityDefaultEdit,
		Type:              typ,
	}
}

func CreateEntitySchemaItemEditViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaItemEditView {
	typ := EntitySchemaItemEditViewTypeRedirectEntityView

	return EntitySchemaItemEditView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaItemEditViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaItemEditView {
	typ := EntitySchemaItemEditViewTypeEntityViewDisabled

	return EntitySchemaItemEditView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaItemEditView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = EntitySchemaItemEditViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = EntitySchemaItemEditViewTypeRedirectEntityView
		return nil
	}

	entityDefaultEdit := new(EntityDefaultEdit)
	if err := utils.UnmarshalJSON(data, &entityDefaultEdit, "", true, true); err == nil {
		u.EntityDefaultEdit = entityDefaultEdit
		u.Type = EntitySchemaItemEditViewTypeEntityDefaultEdit
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntitySchemaItemEditView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultEdit != nil {
		return utils.MarshalJSON(u.EntityDefaultEdit, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntitySchemaItemSummaryAttributesType string

const (
	EntitySchemaItemSummaryAttributesTypeSummaryAttribute EntitySchemaItemSummaryAttributesType = "SummaryAttribute"
	EntitySchemaItemSummaryAttributesTypeStr              EntitySchemaItemSummaryAttributesType = "str"
)

type EntitySchemaItemSummaryAttributes struct {
	SummaryAttribute *SummaryAttribute
	Str              *string

	Type EntitySchemaItemSummaryAttributesType
}

func CreateEntitySchemaItemSummaryAttributesSummaryAttribute(summaryAttribute SummaryAttribute) EntitySchemaItemSummaryAttributes {
	typ := EntitySchemaItemSummaryAttributesTypeSummaryAttribute

	return EntitySchemaItemSummaryAttributes{
		SummaryAttribute: &summaryAttribute,
		Type:             typ,
	}
}

func CreateEntitySchemaItemSummaryAttributesStr(str string) EntitySchemaItemSummaryAttributes {
	typ := EntitySchemaItemSummaryAttributesTypeStr

	return EntitySchemaItemSummaryAttributes{
		Str:  &str,
		Type: typ,
	}
}

func (u *EntitySchemaItemSummaryAttributes) UnmarshalJSON(data []byte) error {

	summaryAttribute := new(SummaryAttribute)
	if err := utils.UnmarshalJSON(data, &summaryAttribute, "", true, true); err == nil {
		u.SummaryAttribute = summaryAttribute
		u.Type = EntitySchemaItemSummaryAttributesTypeSummaryAttribute
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = EntitySchemaItemSummaryAttributesTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntitySchemaItemSummaryAttributes) MarshalJSON() ([]byte, error) {
	if u.SummaryAttribute != nil {
		return utils.MarshalJSON(u.SummaryAttribute, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntitySchemaItemListItem struct {
	SummaryAttributes []EntitySchemaItemSummaryAttributes `json:"summary_attributes,omitempty"`
}

func (o *EntitySchemaItemListItem) GetSummaryAttributes() []EntitySchemaItemSummaryAttributes {
	if o == nil {
		return nil
	}
	return o.SummaryAttributes
}

type EntitySchemaItemSharing struct {
	// Show the sharing button in entity detail view
	ShowSharingButton *bool `json:"show_sharing_button,omitempty"`
}

func (o *EntitySchemaItemSharing) GetShowSharingButton() *bool {
	if o == nil {
		return nil
	}
	return o.ShowSharingButton
}

type EntitySchemaItemSingleViewType string

const (
	EntitySchemaItemSingleViewTypeEntityDefaultEdit  EntitySchemaItemSingleViewType = "EntityDefaultEdit"
	EntitySchemaItemSingleViewTypeRedirectEntityView EntitySchemaItemSingleViewType = "RedirectEntityView"
	EntitySchemaItemSingleViewTypeEntityViewDisabled EntitySchemaItemSingleViewType = "EntityViewDisabled"
)

type EntitySchemaItemSingleView struct {
	EntityDefaultEdit  *EntityDefaultEdit
	RedirectEntityView *RedirectEntityView
	EntityViewDisabled *EntityViewDisabled

	Type EntitySchemaItemSingleViewType
}

func CreateEntitySchemaItemSingleViewEntityDefaultEdit(entityDefaultEdit EntityDefaultEdit) EntitySchemaItemSingleView {
	typ := EntitySchemaItemSingleViewTypeEntityDefaultEdit

	return EntitySchemaItemSingleView{
		EntityDefaultEdit: &entityDefaultEdit,
		Type:              typ,
	}
}

func CreateEntitySchemaItemSingleViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaItemSingleView {
	typ := EntitySchemaItemSingleViewTypeRedirectEntityView

	return EntitySchemaItemSingleView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaItemSingleViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaItemSingleView {
	typ := EntitySchemaItemSingleViewTypeEntityViewDisabled

	return EntitySchemaItemSingleView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaItemSingleView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = EntitySchemaItemSingleViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = EntitySchemaItemSingleViewTypeRedirectEntityView
		return nil
	}

	entityDefaultEdit := new(EntityDefaultEdit)
	if err := utils.UnmarshalJSON(data, &entityDefaultEdit, "", true, true); err == nil {
		u.EntityDefaultEdit = entityDefaultEdit
		u.Type = EntitySchemaItemSingleViewTypeEntityDefaultEdit
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntitySchemaItemSingleView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultEdit != nil {
		return utils.MarshalJSON(u.EntityDefaultEdit, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntitySchemaItemTableViewType string

const (
	EntitySchemaItemTableViewTypeEntityDefaultTable EntitySchemaItemTableViewType = "EntityDefaultTable"
	EntitySchemaItemTableViewTypeRedirectEntityView EntitySchemaItemTableViewType = "RedirectEntityView"
	EntitySchemaItemTableViewTypeEntityViewDisabled EntitySchemaItemTableViewType = "EntityViewDisabled"
)

type EntitySchemaItemTableView struct {
	EntityDefaultTable *EntityDefaultTable
	RedirectEntityView *RedirectEntityView
	EntityViewDisabled *EntityViewDisabled

	Type EntitySchemaItemTableViewType
}

func CreateEntitySchemaItemTableViewEntityDefaultTable(entityDefaultTable EntityDefaultTable) EntitySchemaItemTableView {
	typ := EntitySchemaItemTableViewTypeEntityDefaultTable

	return EntitySchemaItemTableView{
		EntityDefaultTable: &entityDefaultTable,
		Type:               typ,
	}
}

func CreateEntitySchemaItemTableViewRedirectEntityView(redirectEntityView RedirectEntityView) EntitySchemaItemTableView {
	typ := EntitySchemaItemTableViewTypeRedirectEntityView

	return EntitySchemaItemTableView{
		RedirectEntityView: &redirectEntityView,
		Type:               typ,
	}
}

func CreateEntitySchemaItemTableViewEntityViewDisabled(entityViewDisabled EntityViewDisabled) EntitySchemaItemTableView {
	typ := EntitySchemaItemTableViewTypeEntityViewDisabled

	return EntitySchemaItemTableView{
		EntityViewDisabled: &entityViewDisabled,
		Type:               typ,
	}
}

func (u *EntitySchemaItemTableView) UnmarshalJSON(data []byte) error {

	entityViewDisabled := new(EntityViewDisabled)
	if err := utils.UnmarshalJSON(data, &entityViewDisabled, "", true, true); err == nil {
		u.EntityViewDisabled = entityViewDisabled
		u.Type = EntitySchemaItemTableViewTypeEntityViewDisabled
		return nil
	}

	redirectEntityView := new(RedirectEntityView)
	if err := utils.UnmarshalJSON(data, &redirectEntityView, "", true, true); err == nil {
		u.RedirectEntityView = redirectEntityView
		u.Type = EntitySchemaItemTableViewTypeRedirectEntityView
		return nil
	}

	entityDefaultTable := new(EntityDefaultTable)
	if err := utils.UnmarshalJSON(data, &entityDefaultTable, "", true, true); err == nil {
		u.EntityDefaultTable = entityDefaultTable
		u.Type = EntitySchemaItemTableViewTypeEntityDefaultTable
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u EntitySchemaItemTableView) MarshalJSON() ([]byte, error) {
	if u.EntityDefaultTable != nil {
		return utils.MarshalJSON(u.EntityDefaultTable, "", true)
	}

	if u.RedirectEntityView != nil {
		return utils.MarshalJSON(u.RedirectEntityView, "", true)
	}

	if u.EntityViewDisabled != nil {
		return utils.MarshalJSON(u.EntityViewDisabled, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type EntitySchemaItemUIConfig struct {
	CreateView *EntitySchemaItemCreateView `json:"create_view,omitempty"`
	EditView   *EntitySchemaItemEditView   `json:"edit_view,omitempty"`
	ListItem   *EntitySchemaItemListItem   `json:"list_item,omitempty"`
	Sharing    *EntitySchemaItemSharing    `json:"sharing,omitempty"`
	SingleView *EntitySchemaItemSingleView `json:"single_view,omitempty"`
	TableView  *EntitySchemaItemTableView  `json:"table_view,omitempty"`
}

func (o *EntitySchemaItemUIConfig) GetCreateView() *EntitySchemaItemCreateView {
	if o == nil {
		return nil
	}
	return o.CreateView
}

func (o *EntitySchemaItemUIConfig) GetEditView() *EntitySchemaItemEditView {
	if o == nil {
		return nil
	}
	return o.EditView
}

func (o *EntitySchemaItemUIConfig) GetListItem() *EntitySchemaItemListItem {
	if o == nil {
		return nil
	}
	return o.ListItem
}

func (o *EntitySchemaItemUIConfig) GetSharing() *EntitySchemaItemSharing {
	if o == nil {
		return nil
	}
	return o.Sharing
}

func (o *EntitySchemaItemUIConfig) GetSingleView() *EntitySchemaItemSingleView {
	if o == nil {
		return nil
	}
	return o.SingleView
}

func (o *EntitySchemaItemUIConfig) GetTableView() *EntitySchemaItemTableView {
	if o == nil {
		return nil
	}
	return o.TableView
}

// EntitySchemaItem - The "type" of an Entity. Describes the shape. Includes Entity Attributes, Relations and Capabilities.
type EntitySchemaItem struct {
	// An ordered list of attributes the entity contains
	Attributes []Attribute `json:"attributes,omitempty"`
	// Reference to blueprint
	Blueprint    *string                `json:"blueprint,omitempty"`
	Capabilities []EntityCapability     `json:"capabilities,omitempty"`
	Comment      *string                `json:"comment,omitempty"`
	CreatedAt    *string                `json:"created_at,omitempty"`
	DialogConfig map[string]interface{} `json:"dialog_config,omitempty"`
	Draft        *bool                  `json:"draft,omitempty"`
	// This schema should only be active when one of the organization settings is enabled
	EnableSetting []string `json:"enable_setting,omitempty"`
	// Advanced: explicit Elasticsearch index mapping definitions for entity data
	//
	ExplicitSearchMappings map[string]SearchMappings `json:"explicit_search_mappings,omitempty"`
	// This schema should only be active when the feature flag is enabled
	FeatureFlag *string `json:"feature_flag,omitempty"`
	// A dictionary of Group Titles and associated settings if present.
	GroupSettings []EntitySchemaItemGroupSettings `json:"group_settings,omitempty"`
	Icon          *string                         `json:"icon,omitempty"`
	// Generated uuid for schema
	ID *string `json:"id,omitempty"`
	// Custom grid definitions for the layout. These settings are composed by managed and un-managed properties:
	// - Managed Properties: are interpreted and transformed into layout styles
	// - Un-managed Properties: are appended as styles into the attribute mounting node
	//
	LayoutSettings *EntitySchemaItemLayoutSettings `json:"layout_settings,omitempty"`
	// User-friendly identifier for the entity schema
	Name      string `json:"name"`
	Plural    string `json:"plural"`
	Published *bool  `json:"published,omitempty"`
	// URL-friendly identifier for the entity schema
	Slug   string  `json:"slug"`
	Source *Source `json:"source,omitempty"`
	// Template for rendering the title field. Uses handlebars
	TitleTemplate *string                   `json:"title_template,omitempty"`
	UIConfig      *EntitySchemaItemUIConfig `json:"ui_config,omitempty"`
	UpdatedAt     *string                   `json:"updated_at,omitempty"`
	Version       *int64                    `json:"version,omitempty"`
}

func (o *EntitySchemaItem) GetAttributes() []Attribute {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *EntitySchemaItem) GetBlueprint() *string {
	if o == nil {
		return nil
	}
	return o.Blueprint
}

func (o *EntitySchemaItem) GetCapabilities() []EntityCapability {
	if o == nil {
		return nil
	}
	return o.Capabilities
}

func (o *EntitySchemaItem) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *EntitySchemaItem) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EntitySchemaItem) GetDialogConfig() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.DialogConfig
}

func (o *EntitySchemaItem) GetDraft() *bool {
	if o == nil {
		return nil
	}
	return o.Draft
}

func (o *EntitySchemaItem) GetEnableSetting() []string {
	if o == nil {
		return nil
	}
	return o.EnableSetting
}

func (o *EntitySchemaItem) GetExplicitSearchMappings() map[string]SearchMappings {
	if o == nil {
		return nil
	}
	return o.ExplicitSearchMappings
}

func (o *EntitySchemaItem) GetFeatureFlag() *string {
	if o == nil {
		return nil
	}
	return o.FeatureFlag
}

func (o *EntitySchemaItem) GetGroupSettings() []EntitySchemaItemGroupSettings {
	if o == nil {
		return nil
	}
	return o.GroupSettings
}

func (o *EntitySchemaItem) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *EntitySchemaItem) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EntitySchemaItem) GetLayoutSettings() *EntitySchemaItemLayoutSettings {
	if o == nil {
		return nil
	}
	return o.LayoutSettings
}

func (o *EntitySchemaItem) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *EntitySchemaItem) GetPlural() string {
	if o == nil {
		return ""
	}
	return o.Plural
}

func (o *EntitySchemaItem) GetPublished() *bool {
	if o == nil {
		return nil
	}
	return o.Published
}

func (o *EntitySchemaItem) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *EntitySchemaItem) GetSource() *Source {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *EntitySchemaItem) GetTitleTemplate() *string {
	if o == nil {
		return nil
	}
	return o.TitleTemplate
}

func (o *EntitySchemaItem) GetUIConfig() *EntitySchemaItemUIConfig {
	if o == nil {
		return nil
	}
	return o.UIConfig
}

func (o *EntitySchemaItem) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *EntitySchemaItem) GetVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.Version
}
