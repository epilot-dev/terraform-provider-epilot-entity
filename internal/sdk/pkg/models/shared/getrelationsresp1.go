// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"time"
)

type GetRelationsResp1 struct {
	DollarRelation *RelationItem `json:"$relation,omitempty"`
	CreatedAt      time.Time     `json:"_created_at"`
	ID             string        `json:"_id"`
	// Organization Id the entity belongs to
	Org string `json:"_org"`
	// URL-friendly identifier for the entity schema
	Schema string   `json:"_schema"`
	Tags   []string `json:"_tags,omitempty"`
	// Title of entity
	Title     string    `json:"_title"`
	UpdatedAt time.Time `json:"_updated_at"`

	AdditionalProperties map[string]interface{} `json:"-"`
}
type _GetRelationsResp1 GetRelationsResp1

func (c *GetRelationsResp1) UnmarshalJSON(bs []byte) error {
	data := _GetRelationsResp1{}

	if err := json.Unmarshal(bs, &data); err != nil {
		return err
	}
	*c = GetRelationsResp1(data)

	additionalFields := make(map[string]interface{})

	if err := json.Unmarshal(bs, &additionalFields); err != nil {
		return err
	}
	delete(additionalFields, "$relation")
	delete(additionalFields, "_created_at")
	delete(additionalFields, "_id")
	delete(additionalFields, "_org")
	delete(additionalFields, "_schema")
	delete(additionalFields, "_tags")
	delete(additionalFields, "_title")
	delete(additionalFields, "_updated_at")

	c.AdditionalProperties = additionalFields

	return nil
}

func (c GetRelationsResp1) MarshalJSON() ([]byte, error) {
	out := map[string]interface{}{}
	bs, err := json.Marshal(_GetRelationsResp1(c))
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	bs, err = json.Marshal(c.AdditionalProperties)
	if err != nil {
		return nil, err
	}

	if err := json.Unmarshal([]byte(bs), &out); err != nil {
		return nil, err
	}

	return json.Marshal(out)
}
